
# 第5回 併売の分析

## はじめに

パッケージとデータを準備する。

第3回ファイルで使うデータは`chp5.xlsx`です。

- `chp5.xlsx`

パッケージを読み込みます。

```{r packages}
pacman::p_load(tidyverse, readxl, arules, ggthemes, knitr, kableExtra, gt, gtExtras, patchwork)
```

ここで用いる`chp5.xlsx`のシート名を確認します。

```{r sheets}
readxl::excel_sheets("data/chp5.xlsx")
```

## 併売の基礎集計

最初の分析では、併売の基礎集計を行うために、1番目のシート「いつものPOSデータ」を読み込みます。

```{r chp5-1}
#| cache: TRUE
df <- readxl::read_excel("data/chp5.xlsx", sheet = 1)
head(df)
```

まず，各商品が購入された回数を示すように，`個数`が1以上のとき`1`を，そうでないときに`0`を返すダミー変数を作成し，`回数`という変数とします。

```{r pivot_wider}
df_wide <- df |>
  select(レシート番号, 商品名, 個数) |> # 必要な列だけ抽出
  mutate(回数 = if_else(個数 > 0, 1, 0)) |> # 個数が1以上の場合は1、それ以外は0
  select(レシート番号, 商品名, 回数) |>
  pivot_wider(names_from = 商品名, values_from = 回数, values_fill = 0)
head(df_wide)
```




```{r tab_items}
df |>
  select(レシート番号, 商品名, 個数) |> # 必要な列だけ抽出
  mutate(回数 = if_else(個数 > 0, 1, 0)) |> # 個数が1以上の場合は1、それ以外は0
  group_by(商品名) |> # 商品ごとにグループ化
  summarise(購入回数 = sum(回数)) |> # 購入回数を合計
  arrange(desc(購入回数)) |>  # 購入回数で降順ソート
  gt() |> # 作表
  fmt_number(columns = 2, decimals = 0) |>
  tab_options(
    heading.title.font.size = "normal",
    table.font.size = "small"
  ) |>
  gt_theme_pff()
```




これで、テキストの図5-1と同様に、レシート番号ごとに商品名が列になり、購入された場合に1、購入されなかった場合に0が入ったデータフレームができました。
図5−2と同じになるように、自社商品、競合A社〜D社という製品の並びに変更します。




```{r}
df_wide <- df_wide |>
  select(レシート番号, 緑茶, 濃い茶, おいしい緑茶, おいしい濃茶, 静岡の緑茶, ほうじ茶, ウーロン茶)
df_wide |> tail(4)
```


ここから、各商品が別の各商品と一緒に購入された回数を集計します。
まずは自社製品の緑茶だけを取り出して、図5-3を再現してみます。


```{r}
df_wide |>
  filter(緑茶 == 1) |> # 緑茶が購入された場合
  head(5) # 先頭5行を表示
```


変数ごとの合計を求めることで、この緑茶と一緒に購入された回数を商品別に集計します。

```{r}
df_wide |>
  filter(緑茶 == 1) |> # 緑茶が購入された場合
  select(-緑茶) |>
  summarise(across(濃い茶:ウーロン茶, sum)) |> # 商品ごとに合計
  gt() |> # 作表
  fmt_number(columns = 1:6, decimals = 0) |>
  tab_options(
    table.font.size = "small"
  ) |>
  tab_header(title = "緑茶と一緒に購入された商品の個数") |>
  gt_theme_pff()
```



これを関数にして、他の商品にも適用し、一緒に購入された回数を集計します。

```{r}
#| warning: false
# 全商品名を取得
product_names <- colnames(df_wide)[-1] # レシート番号以外の列
# 各商品の販売回数合計を計算
total_counts <- colSums(df_wide[product_names])
# 各商品の購入頻度表を作成
result <- product_names |>
  map_dfr(~ { # purrr::map_dfr()を使ってデータフレームを結合
    df_wide |>
      filter(!!sym(.x) == 1) |> # !!sym()で変数名を展開
      select(-レシート番号) |>
      summarise(
        across(everything(), sum)
        ) |> # 商品ごとに合計
      mutate(
        across(everything(), ~ ifelse(cur_column() == .x, total_counts[.x], .)),
             商品 = .x)
  }) |>
  select(商品, everything())
# ここから下は表の設定なので、なくても動作します
result |>
  gt() |>
  fmt_number(columns = 2:8, decimals = 0) |>
  tab_options(
    table.font.size = "normal",
    heading.title.font.size = "normal",
    ) |>
  gt_color_rows(2:8, palette = "ggsci::blue_material") |>
  tab_header(title = "一緒に販売された商品の個数") |>
  gt_theme_pff()
```



各項目の値を合計値で割ることで、商品ごとの購入率を求めます。

```{r}
result_ratio <- result |>
  mutate(
    緑茶 = 緑茶 / 緑茶[1],
    濃い茶 = 濃い茶 / 濃い茶[2],
    おいしい緑茶 = おいしい緑茶 / おいしい緑茶[3],
    おいしい濃茶 = おいしい濃茶 / おいしい濃茶[4],
    静岡の緑茶 = 静岡の緑茶 / 静岡の緑茶[5],
    ほうじ茶 = ほうじ茶 / ほうじ茶[6],
    ウーロン茶 = ウーロン茶 / ウーロン茶[7]
  )
  # ここから下は表の設定
result_ratio |>
  gt() |>
  fmt_number(columns = 2:8, decimals = 3) |>
  tab_options(table.font.size = "small") |>
  gt_color_rows(2:8, palette = "ggsci::blue_material") |>
  tab_header(title = "一緒に販売された商品の割合(個数/縦合計)") |>
  gt_theme_pff()
```

次に、ある商品が購入された場合に、他の商品も購入されるかどうかを調べます。

```{r oishi_green_tea}
df_oishi_ryo <- df_wide |>
  dplyr::filter(おいしい緑茶 == 1)
df_oishi_ryo |> head(5)
```


## アソシエーション分析

アソシエーション分析とはマーケティングで用いられる分析手法の1つで、POSデータや購買データから、商品の関連性やパターンを見つける分析手法です。
この手法を理解するためには，確率の知識が必要となるので，先に条件付確率の考え方を学びます。

### 条件付確率

事象 $A$ が生起する確率を $\Pr (A)$ ，事象 $B$ が生起する確率を $\Pr (B)$ とします。
事象 $A$ と事象 $B$ が同時に生起する確率を $\Pr (A \cap B)$ で表し，これを**同時確率**といいます。
また、事象 $B$ が生起したときの事象 $A$ の生起確率を $\Pr (A \mid B)$ と表します。これを**条件付確率**といい、次の式で表されます。

$$
\Pr(A \mid B) = \frac{\Pr(A \cap B)}{\Pr(B)}
$$

図にすると次のようになります。

![条件付確率](img/cond_prob.png)

この式は次のように変形できます。
$$
\Pr(A \cap B) = \Pr(B) \times \Pr(A \mid B)
$$

が成り立ちます。
これは事象 $B$　が起こったときに事象 $A$ が起こる確率 $\Pr(A \mid B)$ に、事象 $B$ が起こる確率 $\Pr(B)$ を掛けることで、「事象 $B$ が起こり、さらに事象 $A$ が起こる確率」 $\Pr(A \cap B)$ を求めることができるということです。
ここで <span class="marky">$\Pr(A)$ と $\Pr(B)$ が独立である場合，$\Pr(A \mid B) = \Pr(A)$ が成り立つため，$\Pr(A \cap B) = \Pr(A) \times \Pr(B)$ となります</span>。
<span class="markp">$\Pr(A)$ と $\Pr(B)$ が独立でない場合，$\Pr(A \mid B) \not = \Pr(A)$ となり，$\Pr(A \cap B) \not = \Pr(A) \times \Pr(B)$ となります。</span>

また $\Pr(A) >0$ のときには、$\Pr(A \cap B) = \Pr(A) \times \Pr(B \mid A)$ が成り立ちます。


### アソシエーション分析の考え方

次に，商品の購買データを使ったアソシエーション分析について説明します。
いま，商品 $A$ と商品 $B$ がお店で販売されているとします。
ある商品 $A$ が売れる確率を $\Pr (A)$ で表し、商品 $B$ が売れる確率を $\Pr (B)$ で表します。

$\Pr (B) \not = 0$ のとき、$B$ が売れたときの商品 $A$ の売れる確率を条件付確率 $\Pr (A \mid B)$ で表します。
ここで，$\Pr (A \cap B)$ は商品 $A$ と商品 $B$ が同時に売れる確率を表し，$\Pr (B)$ は条件なしで商品 $B$ が売れる確率を表します。
つまり，条件付確率とは，無条件で商品 $B$ が売れた場合に，商品 $A$ が同時に売れる確率を求めるものです。

:::{.aside}
ここでは $\Pr (A)$ は確率というよりも，特定の商品の販売個数を全商品の販売個数で割った割合で，頻度を示しています。
条件付確率 $\Pr (A \mid B)$ ある特定の商品が売れた場合に限定して，その他の商品が売れる確率を求めるものです。
:::

商品 $B$ を買った人が同時に商品 $A$ も買う条件付確率 $\Pr(A \mid B)$ が、条件なしで商品 $A$ を買う確率 $\Pr (A)$ よりも高いなら，

$$
\frac{\Pr (A \mid B)}{\Pr (A)} > 1
$$

となります。
条件付確率の定義を使うと、この式の左辺は次のように変形できます。
$$
\begin{aligned}
\frac{\Pr (A \mid B)}{\Pr (A)} &= \Pr(A \mid B) \times \frac{1}{\Pr (A)} \\
&= \frac{\Pr (A \cap B)}{\Pr (B)} \times \frac{1}{\Pr (A)} \\
&= \underbrace{\frac{\Pr (A \cap B)}{\Pr (B) \Pr (A)}}_{\text{リフト値}} \gtreqqless 1
\end{aligned}
$$

これを**リフト値**(Lift)といい，つぎように解釈します。

- <span class ="markp">リフト値が1を超えているとき、商品 $A$ を買う確率よりも商品 $B$ を買った場合に商品 $A$ も買う確率のほうが高い。</span>
- リフト値が1のときは，商品 $A$ の購買確率と商品 $B$ の購買確率が独立である，つまり無関係であることを意味します。
- リフト値が1未満のときは，商品 $B$ が売れたとき，商品 $A$ が通常より売れない，つまり負の相関があることを意味します。

図にすると次のようになります。

![リフト値の図示](img/lift_value.png)

要するに，<span class="markp">リフト値は商品 $B$ が売れたとき商品 $A$ が発生する確率が、単に商品 $B$ とは無関係に $A$ が販売される確率と比較してどれだけ高いかを示します。</span>
このようにリフト値から二つの事象が同時に起こる可能性の高さを分析する方法を**アソシエーション分析**(Association Analysis)といいます。

### 支持度と確信度

また、<span class ="marky">このリフト値の分子 $\Pr(A \cap B)$ は商品 $A$ と商品 $B$ が同時に売れる確率</span>であり、これをアソシエーション分析では<span class="marky">AとBの**支持度**(support)と呼びます</span>。
図にすると，次のようになります。

![支持度](img/support_joint.png)

要するに，全ての購買のうち，AとBが同時に売れたケースの出現頻度を測る指標です。

また、<span class ="marky">$B$ を買った人のうち $A$ も買った人の割合を表す条件付確率 $\Pr(A \mid B)$ を**確信度($B \rightarrow A$)**(confidence)と呼びます</span>。

:::{.aside}
信頼度ということもあります。
:::

![確信度](img/confidence.png)

$B$ が売れた場合に，$A$ も売れるという状況がどれだけ確実に予測できるかを示します。
条件付確率 $\Pr (A \mid B)$ が高いということは，$B$ が売れたときは $A$ も高い確率で売れる，ということを意味します。



<!--
- **支持度** : ある商品の購買数を全商品の購買数で割った割合
- **確信度** : 商品Aから商品Bへの確信度は、商品Aと商品Bの同時購入数を商品Aの購入数で割った割合
- **リフト値** : 商品AからBへのリフト値は、商品AからBへの確信度を商品Bの支持度で割った値
 -->

## Rでアソシエーション分析

アソシエーション分析のために用いるデータとして7番目のシート「併売データ」を読み込みたいので，`sheet = 7`を指定します。

```{r readxl}
df_associ <- readxl::read_excel("data/chp5.xlsx", sheet = 7)
head(df_associ)
```

列は商品名で、各セルには購入された場合に1、購入されなかった場合に0が入っている観測値1000のデータフレームが読み込まれました。

### `arules`パッケージ

Rでアソシエーション分析を行うために，`arules`パッケージを使います。
CRANのページにあるマニュアルにMining Association Rules and Frequent Itemsetsとあるように、関連ルールと頻出アイテムセットを見つけるためのパッケージです。

:::{.aside}
具体的な理論とアルゴリズムは，CRANの[Vignettes:introduction to arules](https://cran.r-project.org/web/packages/arules/vignettes/arules.pdf)を参照してください。
:::


ここで用いる`arules`パッケージの`apriori()`関数は、関連ルールに関する制限を識別し、Klemettinen (1994)のアプリオリアルゴリズムを実装しています。

アソシエーション分析を行うために、まずはデータを`transactions`オブジェクトに変換します。
`arules::as()`関数を使って変換します。この関数は引数として`list`や`matrix`を受け取り、`transactions`オブジェクトに変換します。

順番に処理していきます。
`df_associ`は`read_excel()`関数で読み込んだため、`data.frame`型となっています。
これを`as.matrix()`で行列型に変換し、その後`arules::as()`関数で`transactions`オブジェクトに変換し、`df_tran`に代入します。

```{r}
df_tran <- df_associ |>
  as.matrix() |> # 行列型に変換
  as("transactions") # transactionsオブジェクトに変換
```

次に、`apriori()`関数を使ってアソシエーション分析を行います。
この関数は、`transactions`オブジェクトを引数として受け取り、`parameter`引数でサポートと信頼度を指定します。
ここでは、サポートを`0.05`、信頼度を`0.4`とし、結果を`df_ap`に代入します。

```{r transaction}
#| output: false
#| message: false
#| warning: false
df_ap <- arules::apriori(
  df_tran,
  parameter = list(
    support = 0.05, # サポート 0.05
    confidence = 0.4 # 信頼度 0.4
    ) 
  )
```

`df_ap`には、アソシエーション分析の結果が格納されているので、`sort()`関数を使って`lift`でソートし、`inspect()`関数で結果を表示します。

```{r}
result <- df_ap |>
  sort(by = "lift") |> # liftでソート
  inspect()  # 結果を表示
```

結果が見づらいので、`arules::apriori()`関数の結果を`data.frame`型に変換し、変数名を補い、`gt()`関数で表形式にします。

```{r}
result <- result |> 
  as.data.frame() # data.frame型に変換
names(result)[2] <- "arrow" # 変数名を補う

result |> 
  gt() |> # 表形式にする
  fmt_number(columns = 4:7, decimals = 2) |>
  tab_options(
    table.font.size = "small"
  )
```




### 併売データの基礎集計

次に併売データの基礎集計を行います。
商品ごとの購買回数を集計します。

```{r}
df_associ |>
  colSums() |> # 列ごとに合計
  t() |> # 行と列を入れ替え
  kable() # 表形式にする
```

1度に何種類の商品を購入するかを集計します。


```{r}
df_associ |>
  rowSums() |> # 行ごとに合計
  table() |> t() |> kable()
```

同時に2種類の商品を購入するケースが最も多いようです。
どの商品との組み合わせが多いのかを、商品の組ごとの購買回数を調べます。

```{r}
prod_name <- colnames(df_associ)
prod_pair <- combn(prod_name, 2, simplify = FALSE)
prod_counts <- sapply(prod_pair, function(pair) {
  sum(df_associ[[pair[1]]] & df_associ[[pair[2]]])
  })

result <- data.frame(
  商品ペア = sapply(prod_pair, paste, collapse = " & "),
  購入回数 = prod_counts
  ) |>
  arrange(desc(購入回数))
result
```

