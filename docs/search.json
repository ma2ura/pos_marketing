[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "POSとマーケティングデータ分析",
    "section": "",
    "text": "POSデータで学ぶはじめてのマーケティングデータ分析",
    "crumbs": [
      "POSデータで学ぶはじめてのマーケティングデータ分析"
    ]
  },
  {
    "objectID": "index.html#資料の紹介",
    "href": "index.html#資料の紹介",
    "title": "POSとマーケティングデータ分析",
    "section": "資料の紹介",
    "text": "資料の紹介\nこの資料は，横山・花井著 (2024) 「POSデータで学ぶはじめてのマーケティングデータ分析」の内容をRで再現することを目的として作成されています。 そのため書籍の内容にはほとんど触れず，書籍内の分析や作表・作図をRで再現することに焦点を当てています。\n\n\n\nPOSデータとマーケティングデータ分析",
    "crumbs": [
      "POSデータで学ぶはじめてのマーケティングデータ分析"
    ]
  },
  {
    "objectID": "index.html#本資料のねらい",
    "href": "index.html#本資料のねらい",
    "title": "POSとマーケティングデータ分析",
    "section": "本資料のねらい",
    "text": "本資料のねらい\n立命館大学では、学生が利用できるデータベースとして日経NEEDS 社会科学情報検索システムを契約しており、そこで提供されるデータの1つにPOSデータがあります。 POSデータとは、Point of Sales Dataの略で、販売時点のデータのことを指します。 この本では、約40万件のレシートデータを利用して、自社と競合他社の製品の分析を行っています。 POSデータを用いることで、小売店における商品の売れ行きや、顧客の購買行動を分析することを通じて、Rでのデータ操作や分析手法を学ぶことができます。\nこの資料の中で使用しているデータは，本書籍を購入した者のみが利用可能なデータです。 本書を購入し、よく読んでから利用するようにしてください。 ぜひ本書でPOSデータ分析をMS Excelで行う手法を学び、さらにRでの実装を学習したくなったら、この資料を活用してください。",
    "crumbs": [
      "POSデータで学ぶはじめてのマーケティングデータ分析"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html",
    "href": "POS_Marketing_07.html",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "",
    "text": "7.1 準備\nここでは週次集計POSデータを使って、他の店で売れている商品を見つけ出す方法を学びます。 まずパッケージとデータを準備します。\npacman::p_load(tidyverse, readxl, ggthemes, gt, gtExtras, patchwork)\noptions(scipen=100)\n第7回ファイルで使うデータはchp7.xlsxです。 いつものようにchp7.xlsxのシート名を確認します。\nreadxl::excel_sheets(\"data/chp7.xlsx\")\n\n [1] \"2023年11月期データ\" \"図7-1-図7-5\"        \"図7-7\"             \n [4] \"図7-11-図7-15\"      \"図7-18-図7-20\"      \"図7-22-図7-25\"     \n [7] \"図7-27\"             \"図7-28\"             \"表7-2\"             \n[10] \"図7-29\"             \"図7-30\"             \"表7-3\"             \n[13] \"図7-31\"             \"表7-4\"              \"図7-32\"            \n[16] \"表7-5\"              \"表7-6\"              \"図7-33\"            \n[19] \"図7-35\"\nたくさんシートがあるMS Excelファイルですが、1番目の「2023年11月期データ」のシートを読み込みます。 readxlパッケージのread_excel()関数にsheet = 1を指定することで、1番目のシートを読み込むことができます。\ndf &lt;- readxl::read_excel(\"data/chp7.xlsx\", sheet = 1)\nhead(df) # 先頭6行を表示\n\n\n\n\n\n\n\n\n\n\n\n\n\n店舗\n店舗面積\n商圏人口\n最寄り駅からの距離\n駐車場台数\n競合店舗数\n月間売上高\n\n\n\nA001\n1500\n207.6\n100\n27\n12\n130069\n\n\nA002\n1010\n210.8\n590\n20\n3\n72981\n\n\nA003\n1260\n174.5\n180\n57\n19\n84050\n\n\nA004\n1180\n288.8\n580\n57\n9\n108947\n\n\nA005\n1160\n216.1\n1170\n65\n16\n65733\n\n\nA006\n1290\n251.0\n570\n43\n2\n114216\nこのデータフレームには、\nという7つの変数が含まれています。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#店頭カバー率",
    "href": "POS_Marketing_07.html#店頭カバー率",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "",
    "text": "店舗 : 文字列\n店舗面積 : 数値\n商圏人口 : 数値\n最寄り駅からの距離 : 数値\n駐車場台数 : 数値\n競合店舗数 : 数値\n月間売上高 : 数値\n\n\n\n\nそれぞれの詳細はテキストp.215を参照してください。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#回帰分析",
    "href": "POS_Marketing_07.html#回帰分析",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "\n7.4 回帰分析",
    "text": "7.4 回帰分析\n次に、月間売上高を説明するための回帰モデルを構築します。 回帰分析では、結果を表す変数と原因を表す変数の関係、つまり因果関係(causal relationship)を調べます。\n\n\n\n\n\n\n\n種類\n結果を表す変数・出力\n原因を表す変数・入力\n\n\n\nパターン1\n従属変数 (dependent variable)\n独立変数 (independent variables)\n\n\nパターン2\n被説明変数 (explaned variable)\n説明変数 (explanatory variables)\n\n\nパターン3\n目的変数 (objective variable)\n説明変数 (explanatory variables)\n\n\nパターン4\n応答変数 (response variable)\n予測変数 (predictor variable)\n\n\n\n\n\n用語法は文脈によって異なります。ここでの分類は完全に松浦の主観です。\n\n7.4.1 回帰モデル\n回帰モデルは、従属変数と独立変数の関係を数学的に表現するモデルを構築することです。 従属変数を \\(1 \\times n\\) ベクトル\\(y\\)で、独立変数を \\(k \\times n\\) 行列 \\(X\\)とすると、回帰モデルは以下のように表されます。\n\\[\n\\boldsymbol{y} = \\boldsymbol{X} \\boldsymbol{\\beta} + \\boldsymbol{\\varepsilon}\n\\]\nここで、\\(\\boldsymbol{\\beta}\\)は \\(k \\times 1\\) ベクトルで、\\(\\boldsymbol{\\varepsilon}\\)は \\(1 \\times n\\) ベクトルで、誤差項を表します。 成分を書き下すと以下のようになります。\n\\[\n\\begin{aligned}\n\\begin{pmatrix}\ny_1 \\\\\ny_2 \\\\\n\\vdots \\\\\ny_n\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n1 & x_{11} & x_{12} & \\cdots & x_{1k} \\\\\n1 & x_{21} & x_{22} & \\cdots & x_{2k} \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n1 & x_{n1} & x_{n2} & \\cdots & x_{nk} \\\\\n\\end{pmatrix}\n\\begin{pmatrix}\n\\beta_0 \\\\\n\\beta_1 \\\\\n\\vdots \\\\\n\\beta_k\n\\end{pmatrix}\n+\n\\begin{pmatrix}\n\\varepsilon_1 \\\\\n\\varepsilon_2 \\\\\n\\vdots \\\\\n\\varepsilon_n\n\\end{pmatrix}\n\\end{aligned}\n\\]\nこれを展開すると、よく教科書に出てくるような次の式になります。\n\\[\n\\begin{aligned}\ny_i & = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\cdots + \\beta_k x_{ik} + \\varepsilon_i \\\\\n    & = \\beta_0 + \\sum_{j=1}^{k} \\beta_j x_{ij} + \\varepsilon_i\n\\end{aligned}\n\\]\nとりわけ\\(k=1\\)の場合、つまり独立変数が1つだけの回帰モデルを単回帰モデルと呼ばれます。 テキストでは単回帰を繰り返していますが、通常は複数の独立変数を組み込んだ重回帰モデルを構築します。\n\\[\n\\begin{aligned}\n\\text{月間売上高}_i & = \\beta_0 + \\beta_1  店舗面積_i + \\beta_2 商圏人口_i + \\\\\n                   & + \\beta_3 最寄り駅からの距離_i + \\beta_4 駐車場台数_i + \\\\\n                   & + \\beta_5 競合店舗数_i + \\varepsilon_i\n\\end{aligned}\n\\]\nこのモデルをRで推定します。\n\n# 回帰モデルを`reg_model`に格納\nreg_model &lt;- \"月間売上高 ~ 店舗面積 + 商圏人口 + 最寄り駅からの距離 + 駐車場台数 + 競合店舗数\"\nOLS &lt;- lm(reg_model, data = df) # 最小二乗法で回帰分析\nsummary(OLS) # 結果を出力\n\n\nCall:\nlm(formula = reg_model, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22884.9  -8871.7    594.1   9150.0  24149.5 \n\nCoefficients:\n                    Estimate Std. Error t value             Pr(&gt;|t|)    \n(Intercept)        70086.274   9100.157   7.702    0.000000000011489 ***\n店舗面積               4.403      4.763   0.924                0.358    \n商圏人口             199.768     24.087   8.294    0.000000000000636 ***\n最寄り駅からの距離   -47.798      3.691 -12.951 &lt; 0.0000000000000002 ***\n駐車場台数             9.441     54.552   0.173                0.863    \n競合店舗数          -159.811    195.141  -0.819                0.415    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 11470 on 97 degrees of freedom\nMultiple R-squared:  0.7144,    Adjusted R-squared:  0.6997 \nF-statistic: 48.53 on 5 and 97 DF,  p-value: &lt; 0.00000000000000022\n\n\nEstimateは係数の推定値、Std. Errorは標準誤差、t valueはt値、Pr(&gt;|t|)はp値です。 ここでは、商圏人口と最寄り駅からの距離が0.1％水準で統計的に有意となり、商圏人口が月間売上高に正の影響を、最寄り駅からの距離が負の影響を与えていることが分かります。 商圏人口は人数、最寄り駅からの距離は長さといったように変数ごとに単位が異なっているため、回帰係数の大小を比較することはできません。 しかしデータを標準化してから回帰分析を行うと、各変数の係数が標準偏差単位で解釈できるので、変数間の比較がしやすくなります。\n\n7.4.2 標準化\n標準化(standardization)は、変数の単位を揃えるために行います。 確率変数\\(X\\)を標準化するには、平均\\(\\bar{X}\\)を引いて標準偏差\\(s\\)で割ります。\n\\[\n\\begin{aligned}\nZ_i & = \\frac{X_i - \\bar{X}}{s}\n\\end{aligned}\n\\]\nこの標準化された確率変数\\(Z\\)は平均が0、標準偏差が1になります。 したがう分布は元のままですが，平均が0，標準偏差が1になるため，異なる尺度の変数を比較する際に便利です。\n月刊売上高で確認してみましょう。 月間売上高の平均は92501.56、標準偏差は20931.89です。 標準化を行うために便利なパッケージであるscale()関数を使います。\n\ndf &lt;- df |&gt;\n  mutate(\n    標準化月間売上高 = scale(月間売上高) # 月間売上高を標準化\n  )\n\n標準化月間売上高の平均は0、標準偏差は1となっていることが確認できました。 分布を図で表すためにヒストグラムを描いてみます。\n\nhist(df$月間売上高, main = \"月間売上高の分布\", xlab = \"月間売上高\") # ヒストグラム\nabline(v = mean(df$月間売上高), col = \"red\", lwd = 2) # 平均値に赤線を追加\n\n\n\n\n\n\n\n正規化したヒストグラムを描いてみます。\n\nhist(scale(df$月間売上高), main = \"月間売上高の標準化\", xlab = \"月間売上高\") # 標準化したヒストグラム\nabline(v = mean(scale(df$月間売上高)), col = \"red\", lwd = 2) # 平均値に赤線を追加\n\n\n\n\n\n\n\n正規化する前とした後の回帰分析の結果を比較してみましょう。 ここでは、modelsummaryパッケージを使って結果をまとめて表示します。\n\ndf_std &lt;- df |&gt;\n  select(店舗面積, 商圏人口, 最寄り駅からの距離, 駐車場台数, 競合店舗数, 月間売上高) |&gt;\n  scale() |&gt; # 標準化\n  as.data.frame() # データフレームに変換\nresult_std &lt;- lm(月間売上高 ~ 店舗面積 + 商圏人口 + 最寄り駅からの距離 + 駐車場台数 + 競合店舗数, data = df_std)\nresults &lt;- list(\"OLS\" = OLS, \"標準化\" = result_std)\nmodelsummary::msummary(results,\n                       stars = TRUE,\n                       digits = 3)\n\n\n\n    \n\n      \n\n \n                OLS\n                標準化\n              \n+ p \n\n\n(Intercept)       \n                  70086.274***\n                  0.000    \n                \n\n                  \n                  (9100.157)  \n                  (0.054)  \n                \n\n店舗面積          \n                  4.403       \n                  0.052    \n                \n\n                  \n                  (4.763)     \n                  (0.056)  \n                \n\n商圏人口          \n                  199.768***  \n                  0.465*** \n                \n\n                  \n                  (24.087)    \n                  (0.056)  \n                \n\n最寄り駅からの距離\n                  -47.798***  \n                  -0.715***\n                \n\n                  \n                  (3.691)     \n                  (0.055)  \n                \n\n駐車場台数        \n                  9.441       \n                  0.010    \n                \n\n                  \n                  (54.552)    \n                  (0.056)  \n                \n\n競合店舗数        \n                  -159.811    \n                  -0.045   \n                \n\n                  \n                  (195.141)   \n                  (0.055)  \n                \n\nNum.Obs.          \n                  103         \n                  103      \n                \n\nR2                \n                  0.714       \n                  0.714    \n                \n\nR2 Adj.           \n                  0.700       \n                  0.700    \n                \n\nAIC               \n                  2225.7      \n                  176.2    \n                \n\nBIC               \n                  2244.2      \n                  194.7    \n                \n\nLog.Lik.          \n                  -1105.860   \n                  -81.110  \n                \n\nF                 \n                  48.527      \n                  48.527   \n                \n\nRMSE              \n                  11131.88    \n                  0.53",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html",
    "href": "POS_Marketing_01.html",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "",
    "text": "1.1 はじめに\n第1回の内容は，POSデータを集約して，売上金額や売上個数の合計を計算し，販売状況の特徴を把握しやすい図や表を作成することです。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#この章で使うファイルとパッケージ",
    "href": "POS_Marketing_01.html#この章で使うファイルとパッケージ",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.2 この章で使うファイルとパッケージ",
    "text": "1.2 この章で使うファイルとパッケージ\nここで用いるファイルは，MS Excelのファイルです。 MS Excelで作成されたフィアルは拡張子に.xlsxがついています。\n\n\n拡張子(extension)は，ファイル名の最後についている.xlsxや.csvなどの文字列のことで，ファイルの種類を示しています。Windowsではデフォルトで拡張子が表示されない設定になっているかもしれないので，必ず拡張子を表示させる設定にしておいてください。.exeファイルを知らずに実行すると，ウイルスに感染する可能性があるので，拡張子を表示させることはセキュリティ上も重要です。\n\nchp1.xlsx\n\nRの機能を拡張するために，ここでは以下のパッケージを用います。\n\n\ntidyverse : データの読み込み，加工，可視化に使うパッケージ\n\nreadxl : Excelファイルを読み込むためのパッケージ\n\n通常，Rではinstall.packages()関数を使ってパッケージをインストールし，library()で読み出しますが，ここではpacmanパッケージを使って一括でインストール・読み込みを行います。\npacmanパッケージを使うために，以下のコードを実行してください。\n\ninstall.packages(\"tinytex\")\ninstall.packages(\"pacman\") # 最初の1回だけ実行\n\npacmanパッケージには便利な関数がいろいろありますが，ここではp_load()関数を使って複数のパッケージを一括で読み込みます。まだインストールされていないパッケージがあれば，自動でインストールされます。 便利なパッケージをいろいろ読み込んでおきましょう。\n\npacman::p_load(tidyverse, readxl, ggthemes, gt, gtExtras)\n\n\n\nggtheme : グラフのテーマを変更するためのパッケージ\n\ngt : 表を作成するためのパッケージ\n\ngtExtras : gtパッケージの拡張機能を提供するパッケージ\n\n\n\npacman::p_load()のように，「パッケージ名::関数名」という書き方で，パッケージ名を指定して関数を使うと，p_load()関数がpacmanパッケージの関数であることが分かりやすいので，似たような名前の関数があるときは，パッケージ名をつけて使うといいでしょう。 たとえば，dplyr::select()関数やreadxl::read_excel()関数です。\nこの章で使うファイルは作業ディレクトリのdataフォルダにいれておきましょう。 Rは作業ディレクトリとなっているフォルダを軸にしてファイルを読み込むため，ファイルの場所に注意してください。 ここでは作業ディレクトリの中にdataフォルダを作り，そこにchp1.xlsxを保存してあるので，data/chp1.xlsxと指定することでファイルにアクセスしています。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#rの準備",
    "href": "POS_Marketing_01.html#rの準備",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.3 Rの準備",
    "text": "1.3 Rの準備\n\nRをインストールしておきましょう。\nRStudioかVS Codeをインストールしておきましょう。\nRのパッケージtidyverseをインストールしておきましょう。\n作業ディレクトリを設定しておきましょう。\n\nこれらの内容が分からない場合は，R入門の資料や本を参照してください。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#データの読み込み",
    "href": "POS_Marketing_01.html#データの読み込み",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.4 データの読み込み",
    "text": "1.4 データの読み込み\nまずはreadxlパッケージを使ってデータchp1.xlsxを読み込んでみましょう。 このExcelファイルのシートの一覧を表示してみます。\n\nreadxl::excel_sheets(\"data/chp1.xlsx\")\n\n[1] \"いつものPOSデータ\"     \"ピボットテーブル\"      \"表1-2・図1-19\"        \n[4] \"表1-4・図1-28・図1-29\" \"表1-5・図1-32\"         \"表1-6\"                \n[7] \"図1-38\"               \n\n\nexcel_sheets()関数はデフォルトで1番目のシートを読み込みます。 「いつものPOSデータ」を読み込みたいので，特に指定せずにread_excel()関数を使って読み込みます。\n\ndf &lt;- readxl::read_excel(\"data/chp1.xlsx\")\nhead(df) # 戦闘6行を表示\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n日付\n曜日\n時間\n性別\n年代\nメーカー\n商品名\n単価\n個数\n金額\n\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合A\nおいしい緑茶\n160\n2\n320\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合B\n静岡の緑茶\n170\n2\n340\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合A\nおいしい濃茶\n160\n2\n320\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合B\n静岡の緑茶\n170\n4\n680\n\n\nR000003\n2023-01-02\n月\n10\n男性\n50代\n競合C\nほうじ茶\n140\n1\n140\n\n\nR000004\n2023-01-02\n月\n10\n女性\n50代\n競合D\nウーロン茶\n140\n3\n420\n\n\n\n\n\n\nどんな変数があるのか確認するにはnames()関数を使います。\n\nnames(df)\n\n [1] \"レシート番号\" \"日付\"         \"曜日\"         \"時間\"         \"性別\"        \n [6] \"年代\"         \"メーカー\"     \"商品名\"       \"単価\"         \"個数\"        \n[11] \"金額\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#データの属性を確認する",
    "href": "POS_Marketing_01.html#データの属性を確認する",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.5 データの属性を確認する。",
    "text": "1.5 データの属性を確認する。\nデータの属性や型を確認するにはstr()関数を使います。\n\nstr(df)\n\ntibble [374,090 × 11] (S3: tbl_df/tbl/data.frame)\n $ レシート番号: chr [1:374090] \"R000001\" \"R000001\" \"R000002\" \"R000002\" ...\n $ 日付        : POSIXct[1:374090], format: \"2023-01-02\" \"2023-01-02\" ...\n $ 曜日        : chr [1:374090] \"月\" \"月\" \"月\" \"月\" ...\n $ 時間        : num [1:374090] 10 10 10 10 10 10 10 10 10 10 ...\n $ 性別        : chr [1:374090] \"女性\" \"女性\" \"男性\" \"男性\" ...\n $ 年代        : chr [1:374090] \"30代\" \"30代\" \"60歳以上\" \"60歳以上\" ...\n $ メーカー    : chr [1:374090] \"競合A\" \"競合B\" \"競合A\" \"競合B\" ...\n $ 商品名      : chr [1:374090] \"おいしい緑茶\" \"静岡の緑茶\" \"おいしい濃茶\" \"静岡の緑茶\" ...\n $ 単価        : num [1:374090] 160 170 160 170 140 140 160 150 150 160 ...\n $ 個数        : num [1:374090] 2 2 2 4 1 3 1 2 3 4 ...\n $ 金額        : num [1:374090] 320 340 320 680 140 420 160 300 450 640 ...\n\n\ndplyr::glimpse()関数を使うと，データの概要をより見やすく表示できます。\n\ndplyr::glimpse(df)\n\nRows: 374,090\nColumns: 11\n$ レシート番号 &lt;chr&gt; \"R000001\", \"R000001\", \"R000002\", \"R000002\", \"R000003\", \"R…\n$ 日付         &lt;dttm&gt; 2023-01-02, 2023-01-02, 2023-01-02, 2023-01-02, 2023-01-…\n$ 曜日         &lt;chr&gt; \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月…\n$ 時間         &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1…\n$ 性別         &lt;chr&gt; \"女性\", \"女性\", \"男性\", \"男性\", \"男性\", \"女性\", \"女性\", \"…\n$ 年代         &lt;chr&gt; \"30代\", \"30代\", \"60歳以上\", \"60歳以上\", \"50代\", \"50代\", \"…\n$ メーカー     &lt;chr&gt; \"競合A\", \"競合B\", \"競合A\", \"競合B\", \"競合C\", \"競合D\", \"競…\n$ 商品名       &lt;chr&gt; \"おいしい緑茶\", \"静岡の緑茶\", \"おいしい濃茶\", \"静岡の緑茶…\n$ 単価         &lt;dbl&gt; 160, 170, 160, 170, 140, 140, 160, 150, 150, 160, 160, 17…\n$ 個数         &lt;dbl&gt; 2, 2, 2, 4, 1, 3, 1, 2, 3, 4, 1, 2, 2, 1, 1, 2, 1, 2, 3, …\n$ 金額         &lt;dbl&gt; 320, 340, 320, 680, 140, 420, 160, 300, 450, 640, 160, 34…\n\n\nこの表の上部をみると、このデータには変数が11個，観測値が374090個あることが分かります。 また，変数名の横に&lt;chr&gt;や&lt;dbl&gt;といった文字が表示されていますが，これは変数の型を示しています。 &lt;chr&gt;は文字列型，&lt;dbl&gt;は数値型，&lt;dttm&gt;は日付型を示しています。\n\n\n文字型，数値型，日付型以外にも，\n\n\n&lt;fct&gt;: 因子型\n\n&lt;int&gt;: 整数型\n\n&lt;lgl&gt;: 論理型\n\nなどがあります。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#データの概要を確認する",
    "href": "POS_Marketing_01.html#データの概要を確認する",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.6 データの概要を確認する",
    "text": "1.6 データの概要を確認する\nデータの属性を確認するために，summary()関数を使ってみましょう。 基本関数summary()は，データの記述統計量などを返してくれる関数です。\n\nsummary(df)\n\n レシート番号            日付                            曜日          \n Length:374090      Min.   :2023-01-02 00:00:00.00   Length:374090     \n Class :character   1st Qu.:2023-05-09 00:00:00.00   Class :character  \n Mode  :character   Median :2023-07-28 00:00:00.00   Mode  :character  \n                    Mean   :2023-07-16 10:09:45.75                     \n                    3rd Qu.:2023-09-23 00:00:00.00                     \n                    Max.   :2023-12-31 00:00:00.00                     \n      時間           性別               年代             メーカー        \n Min.   :10.00   Length:374090      Length:374090      Length:374090     \n 1st Qu.:13.00   Class :character   Class :character   Class :character  \n Median :16.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :15.57                                                           \n 3rd Qu.:18.00                                                           \n Max.   :21.00                                                           \n    商品名               単価            個数             金額       \n Length:374090      Min.   :140.0   Min.   : 1.000   Min.   : 140.0  \n Class :character   1st Qu.:150.0   1st Qu.: 1.000   1st Qu.: 160.0  \n Mode  :character   Median :160.0   Median : 2.000   Median : 280.0  \n                    Mean   :154.5   Mean   : 1.783   Mean   : 275.7  \n                    3rd Qu.:160.0   3rd Qu.: 2.000   3rd Qu.: 320.0  \n                    Max.   :170.0   Max.   :14.000   Max.   :2100.0  \n\n\nこの表より，\n\n日付は2023年1月2日から2023年12月31日まで\n時間は10:00から21:00まで\n単価は数値で，140〜170\n個数は数値で，1〜14\n金額は数値で，140〜2100\n\nとなっていることがわかります。 また文字型となっている曜日，性別，年代，メーカー，商品名はデータの個数としてLength:が出力されていることがわかります。 文字列のsummary()を出力しても意味がないので，文字型の変数を除外して，数値型の変数だけを表示するには，select()関数とwhere()関数を使い， is.double関数を使って数値型の変数だけを選択します。\n\ndf |&gt;\n  select(where(is.double)) |&gt;\n  summary()\n\n      日付                             時間            単価      \n Min.   :2023-01-02 00:00:00.00   Min.   :10.00   Min.   :140.0  \n 1st Qu.:2023-05-09 00:00:00.00   1st Qu.:13.00   1st Qu.:150.0  \n Median :2023-07-28 00:00:00.00   Median :16.00   Median :160.0  \n Mean   :2023-07-16 10:09:45.75   Mean   :15.57   Mean   :154.5  \n 3rd Qu.:2023-09-23 00:00:00.00   3rd Qu.:18.00   3rd Qu.:160.0  \n Max.   :2023-12-31 00:00:00.00   Max.   :21.00   Max.   :170.0  \n      個数             金額       \n Min.   : 1.000   Min.   : 140.0  \n 1st Qu.: 1.000   1st Qu.: 160.0  \n Median : 2.000   Median : 280.0  \n Mean   : 1.783   Mean   : 275.7  \n 3rd Qu.: 2.000   3rd Qu.: 320.0  \n Max.   :14.000   Max.   :2100.0  \n\n\n\n\nis.double()関数は，引数の型が数値型かどうかを判定する関数で，数値型の場合はTRUEを返し，そうでない場合はFALSEを返します。このように，is.型名()関数は，型を判定する関数として使われます。 条件を満たす変数だけを選択するdplyr::select()関数と，dplyr::where()関数を使うことで変数の型を指定して変数を抽出できます。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#因子型",
    "href": "POS_Marketing_01.html#因子型",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.7 因子型",
    "text": "1.7 因子型\nこれらの文字型変数曜日，性別，年代，メーカー，商品名は，どのカテゴリーに属しているかを表しているカテゴリカルデータであるため， 文字型から因子型(factor)に変換しておきましょう。 変数を因子型に変更するには，facor()関数やas.factor()関数を使います。 ここでは，曜日に順番があるため，levelsオプションとorderedオプションで曜日の種類と順番を指定しています。\n\ndf &lt;- df %&gt;%\n  mutate(曜日 = factor(曜日, levels = c(\"月\", \"火\", \"水\", \"木\", \"金\", \"土\", \"日\"), ordered = TRUE),\n         性別 = as.factor(性別),\n         年代 = as.factor(年代),\n         メーカー = as.factor(メーカー),\n         商品名 = as.factor(商品名))\n\n変数の型を変更したので，もう一度，summary()関数を使ってデータを確認してみましょう。\n\nsummary(df)\n\n レシート番号            日付                        曜日            時間      \n Length:374090      Min.   :2023-01-02 00:00:00.00   月:36468   Min.   :10.00  \n Class :character   1st Qu.:2023-05-09 00:00:00.00   火:44573   1st Qu.:13.00  \n Mode  :character   Median :2023-07-28 00:00:00.00   水:52418   Median :16.00  \n                    Mean   :2023-07-16 10:09:45.75   木:37703   Mean   :15.57  \n                    3rd Qu.:2023-09-23 00:00:00.00   金:66894   3rd Qu.:18.00  \n                    Max.   :2023-12-31 00:00:00.00   土:74754   Max.   :21.00  \n                                                     日:61280                  \n   性別              年代        メーカー               商品名     \n 女性:274659   20歳未満:19102   競合A:144742   ウーロン茶  :31905  \n 男性: 99431   20代    :49716   競合B: 46516   おいしい濃茶:59910  \n               30代    :81065   競合C: 39190   おいしい緑茶:84832  \n               40代    :74773   競合D: 31905   ほうじ茶    :39190  \n               50代    :93194   自社 :111737   静岡の緑茶  :46516  \n               60歳以上:56240                  濃い茶      :45982  \n                                               緑茶        :65755  \n      単価            個数             金額       \n Min.   :140.0   Min.   : 1.000   Min.   : 140.0  \n 1st Qu.:150.0   1st Qu.: 1.000   1st Qu.: 160.0  \n Median :160.0   Median : 2.000   Median : 280.0  \n Mean   :154.5   Mean   : 1.783   Mean   : 275.7  \n 3rd Qu.:160.0   3rd Qu.: 2.000   3rd Qu.: 320.0  \n Max.   :170.0   Max.   :14.000   Max.   :2100.0  \n                                                  \n\n\nすると，曜日，性別，年代，メーカー，商品名がカテゴリー変数として認識され，カテゴリーごとの個数が表示されています。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#条件によるデータの抽出",
    "href": "POS_Marketing_01.html#条件によるデータの抽出",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.8 条件によるデータの抽出",
    "text": "1.8 条件によるデータの抽出\nメーカー変数が自社の場合だけを抽出するには，dplyr::filter()関数を使います。 filter()関数は，引数にメーカー == \"自社という条件を指定することで，条件に合致するデータだけを抽出します。\n\ndf |&gt;\n  dplyr::filter(メーカー == \"自社\") |&gt;\n  head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n日付\n曜日\n時間\n性別\n年代\nメーカー\n商品名\n単価\n個数\n金額\n\n\n\nR000005\n2023-01-02\n月\n10\n女性\n50代\n自社\n濃い茶\n150\n2\n300\n\n\nR000005\n2023-01-02\n月\n10\n女性\n50代\n自社\n緑茶\n150\n3\n450\n\n\nR000010\n2023-01-02\n月\n10\n女性\n50代\n自社\n濃い茶\n150\n2\n300\n\n\nR000010\n2023-01-02\n月\n10\n女性\n50代\n自社\n緑茶\n150\n1\n150\n\n\nR000011\n2023-01-02\n月\n10\n男性\n20代\n自社\n緑茶\n150\n1\n150\n\n\nR000012\n2023-01-02\n月\n10\n女性\n20代\n自社\n緑茶\n150\n1\n150",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#基礎集計でデータの傾向をチェック",
    "href": "POS_Marketing_01.html#基礎集計でデータの傾向をチェック",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.9 基礎集計でデータの傾向をチェック",
    "text": "1.9 基礎集計でデータの傾向をチェック\nメーカーごとの売上金額合計を示す表を作成してみましょう。 Excelでピボットテーブルを使う手続が教科書で解説されていますが，Rだとdplyrパッケージを使って簡単にできます。\n\ndf_maker_sales &lt;- df |&gt;\n  dplyr::group_by(メーカー) |&gt;\n  dplyr::summarise(売上金額合計 = sum(金額))\ndf_maker_sales\n\n\n\n\nメーカー\n売上金額合計\n\n\n\n競合A\n42695520\n\n\n競合B\n13537440\n\n\n競合C\n9289700\n\n\n競合D\n7486080\n\n\n自社\n30126150\n\n\n\n\n\n\nこれだけです。 キレイな表にするなら，gt()関数とgtExtraパッケージを使うといいでしょう。\n\ndf_maker_sales |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:2, decimals = 0) |&gt;\n  tab_header(title = \"表1-2 メーカーごとの売上金額\") |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  as_raw_html()\n\n\n  \n  \n\n\n\n表1-2 メーカーごとの売上金額\n\n\nメーカー\n売上金額合計\n\n\n\n\n競合A\n42,695,520\n\n\n競合B\n13,537,440\n\n\n競合C\n9,289,700\n\n\n競合D\n7,486,080\n\n\n自社\n30,126,150\n\n\n\n\n\n\n次に，各メーカーのどの商品が，平均何円で売られているのか，を調べてみましょう。 group_by()関数の引数に，メーカーと商品名を指定して，summarise()関数でグループごとの平均単価を計算し， arrange()関数でメーカーと平均単価でソートします。desc()関数は降順にソートするための関数です。\n\ndf_maker_item &lt;- df |&gt;\n  group_by(メーカー, 商品名) |&gt; # メーカーと商品名でグループ化\n  summarise(平均単価 = mean(単価)) |&gt; # 平均単価を計算\n  arrange(メーカー, desc(平均単価)) |&gt;# メーカーと平均単価でソート\n  ungroup()\n\n`summarise()` has grouped output by 'メーカー'. You can override using the\n`.groups` argument.\n\ndf_maker_item |&gt;\n  gt() |&gt;\n  fmt_number(columns = 3:3, decimals = 0) |&gt;\n  tab_header(title = \"表1−3 商品ごとの単価\") |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  as_raw_html()\n\n\n  \n  \n\n\n\n表1−3 商品ごとの単価\n\n\nメーカー\n商品名\n平均単価\n\n\n\n\n競合A\nおいしい濃茶\n160\n\n\n競合A\nおいしい緑茶\n160\n\n\n競合B\n静岡の緑茶\n170\n\n\n競合C\nほうじ茶\n140\n\n\n競合D\nウーロン茶\n140\n\n\n自社\n濃い茶\n150\n\n\n自社\n緑茶\n150",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#資料作成に必要なデータを取り出す",
    "href": "POS_Marketing_01.html#資料作成に必要なデータを取り出す",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.10 資料作成に必要なデータを取り出す",
    "text": "1.10 資料作成に必要なデータを取り出す\nデータ全体における売上金額と売上個数を計算して，各月と各時間帯にの売上金額を計算してみる。\n\n# 全体の売上金額と売上個数\ndf |&gt;\n  summarise(\n    売上金額合計 = sum(金額),\n    売上個数合計 = sum(個数)\n    )\n\n\n\n\n売上金額合計\n売上個数合計\n\n\n103134890\n667147\n\n\n\n\n\n自社製品ごとの個数と金額を計算してみましょう。\n\ndf_jisha_total &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt; # 自社製品だけを抽出\n  group_by(商品名) |&gt;\n  summarise(\n    売上金額合計 = sum(金額),\n    売上個数合計 = sum(個数)\n    ) |&gt;\n  arrange(desc(売上金額合計))\ndf_jisha_total\n\n\n\n\n商品名\n売上金額合計\n売上個数合計\n\n\n\n緑茶\n18057150\n120381\n\n\n濃い茶\n12069000\n80460\n\n\n\n\n\n\nこれで自社の製品ごとの売上金額と売上個数の合計が計算されました。 ここで注意しないといけないことは，group_by()関数とsummarise()関数を使った場合，グループごとに1つの統計量を返すため，上のコードだと， 自社の2商品ごとの売上金額と売上個数の合計が出力され，2行2列のデータフレームが返されていることが分かります。\n次に，各月ごとの売上金額を計算してみましょう。 日付変数の型を確認します。\n\nclass(df$日付)\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nPOSIXct POSIXt という日付型のデータです。 この変数日付から月を取り出すには，lubridateパッケージを使います。 日付データは2023-05-14 UTCといった形式で格納されているため，lubridate::month()関数を使って月を取り出します。\n\ndf_month_sales &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  mutate(月 = lubridate::month(日付, label = TRUE)) |&gt;\n  group_by(月) |&gt; # 月ごとにグループ化\n  summarise(売上金額合計 = sum(金額)) |&gt;\n  arrange(月) |&gt;\n  ungroup()\n\ndf_month_sales |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:2, decimals = 0) |&gt;\n  tab_header(title = \"表1−5 自社商品の月ごとの売上金額\") |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  tab_options(\n    heading.title.font.size = \"small\",\n    table.font.size = \"large\",\n    table.width = pct(60)\n    )\n\n\n\n\n\n\n表1−5 自社商品の月ごとの売上金額\n\n\n月\n売上金額合計\n\n\n\n\n1\n1,577,250\n\n\n2\n1,317,900\n\n\n3\n1,809,300\n\n\n4\n2,238,750\n\n\n5\n2,506,050\n\n\n6\n2,288,550\n\n\n7\n3,844,350\n\n\n8\n4,231,950\n\n\n9\n3,599,550\n\n\n10\n2,888,250\n\n\n11\n2,140,800\n\n\n12\n1,683,450\n\n\n\n\n\n\n同じように各時間帯ごとの売上金額を計算してみましょう。\n\ndf_time_sales &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  group_by(時間) |&gt;\n  summarise(売上金額合計 = sum(金額)) |&gt;\n  arrange(時間) |&gt;\n  ungroup()\n\ndf_time_sales |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:2, decimals = 0) |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  tab_header(title = \"表1−6 自社商品の時間帯別売上高\") |&gt;\n  tab_options(\n        heading.title.font.size = \"small\",\n        table.font.size = \"large\",\n        table.width = pct(60)\n        )\n\n\n\n\n\n\n表1−6 自社商品の時間帯別売上高\n\n\n時間\n売上金額合計\n\n\n\n\n10\n1,506,600\n\n\n11\n2,070,750\n\n\n12\n2,942,400\n\n\n13\n2,729,550\n\n\n14\n2,108,700\n\n\n15\n2,740,050\n\n\n16\n3,033,150\n\n\n17\n3,617,700\n\n\n18\n3,038,550\n\n\n19\n2,710,950\n\n\n20\n2,124,900\n\n\n21\n1,502,850",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#集計結果をグラフで可視化",
    "href": "POS_Marketing_01.html#集計結果をグラフで可視化",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.11 集計結果をグラフで可視化",
    "text": "1.11 集計結果をグラフで可視化\n可視化はRの得意分野です。 ggplot2パッケージを使って，いろんなグラフで表示してみましょう。\n\n\nggplot2パッケージで日本語を表示させるためには，一手間必要になります。 しかもMacOSとWindowsでやり方が異なるので，注意してください。 松浦の環境はMacOSであるため，ヒラギノフォントを指定してます。 ついでに，カラーパレットもユニバーサルデザインに配慮したscale_fill_tableau(name = \"Tableau 20\")を指定してます。\nメーカー別の売上合計金額を棒グラフにします。\n\ndf_maker_sales |&gt;\n  ggplot() + aes(x = メーカー, y = 売上金額合計, fill = メーカー) +\n  geom_col() + theme_bw(base_family = \"Noto San JP\") +\n  scale_fill_tableau(name = \"Tableau 20\") # Tableau 20 パレットを適用\n\n\n\n\n\n\n\n月別売上高を折れ線グラフにします。\n\ndf_month_sales |&gt;\n  ggplot() + aes(x = 月, y = 売上金額合計, group = 1) +\n  geom_line() + geom_point() +\n  theme_bw(base_family = \"HiraKakuPro-W3\")\n\n\n\n\n\n\n\n夏に売上高がピークを迎えていることが分かります。\n時間帯別売上高を棒グラフにします。\n\ndf_time_sales |&gt;\n  ggplot() +\n  aes(x = 時間, y = 売上金額合計, fill = factor(時間, levels = rev(unique(時間)))) + # 時間の順序を逆にする\n  geom_col() + theme_bw(base_family = \"HiraKakuPro-W3\") + # テーマとフォント\n  guides(fill = guide_legend(title = \"時間帯\")) +\n  scale_fill_viridis_d(direction = 1) # Viridis パレットを逆順に適用\n\n\n\n\n\n\n\n12時ころと17時ころに売上高が大きくなっているので，昼食・夕食の時間帯に売上が伸びていることが分かります。\nさらに，月ごと，時間ごとの棒グラフを重ねて表示してみましょう。\n\ndf_month_time_sales &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  mutate(月 = lubridate::month(日付, label = TRUE),\n         時間 = as.factor(時間)) |&gt;\n  group_by(月, 時間) |&gt;\n  summarise(売上金額合計 = sum(金額)) |&gt;\n  arrange(月, 時間)\n\n`summarise()` has grouped output by '月'. You can override using the `.groups`\nargument.\n\ndf_month_time_sales |&gt;\n  ggplot() + aes(x = 月, y = 売上金額合計, fill = 時間) +\n  geom_col(position = \"dodge\") + theme_bw(base_family = \"HiraKakuPro-W3\") +\n  guides(fill = guide_legend(title = \"時間帯\")) +\n  scale_fill_viridis_d(direction = -1)\n\n\n\n\n\n\n\n昼食時と夕食前に売上が伸びる傾向は1月から12月まで観察されていますが，その差は夏が非常に多く，冬には昼食時と夕食前とそれ以外の売上の差が小さくなっていることが分かります。\nこれをアニメーションにしてみましょう。 Rにはggplot2パッケージで作ったグラフをアニメーションにするgganimateパッケージがあります。 ここでは，transition_states()関数とenter_fade()関数，exit_fade()関数を使って，時間帯ごとの売上高をアニメーションで表示してみます。\n\n\ntransition_states(): アニメーションの状態を指定します。\n\nenter_fade(): アニメーションの開始時のエフェクトを指定します。\n\nexit_fade(): アニメーションの終了時のエフェクトを指定します。\n\n\npacman::p_load(gganimate)\n\n\ndf_month_time_sales |&gt;\n  ggplot() +\n  aes(x = 月, y = 売上金額合計, fill = 時間) +\n  geom_col(position = \"dodge\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  guides(fill = guide_legend(title = \"時間帯\")) +\n  scale_fill_viridis_d(direction = -1) +\n  transition_states(時間, transition_length = 2, state_length = 1) +\n  labs(\n    title = \"月ごとの時間帯別売上高: 時間帯 {closest_state} 時\",\n    x = \"月\",\n    y = \"売上金額合計\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\n\n\n\n\n\n\n同じように，月と時間を入れ替えてみましょう。\n\ndf_month_time_sales |&gt;\n  ggplot() +\n  aes(x = 時間, y = 売上金額合計, fill = 月) +\n  geom_col(position = \"dodge\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  guides(fill = guide_legend(title = \"月\")) +\n  scale_fill_viridis_d(direction = -1) +\n  transition_states(月, transition_length = 2, state_length = 1) +\n  labs(\n    title = \"時間ごとの月別売上高:  {closest_state} 月\",\n    x = \"時間\",\n    y = \"売上金額合計\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\n\n\n\n\n\n\nテキストの気温と販売個数の散布図は，気温データがないため作れません。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#提出用の資料を作成する",
    "href": "POS_Marketing_01.html#提出用の資料を作成する",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.12 提出用の資料を作成する。",
    "text": "1.12 提出用の資料を作成する。\nテキストではMS Excelで作成した表を、MS Powerpointに貼り付けてスライド資料を作成するようになっていますが、 RとQuartoを使えば、データ分析と資料作成を同じ場所で行うことができます。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#準備",
    "href": "POS_Marketing_07.html#準備",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "",
    "text": "店舗 : 文字列\n店舗面積 : 数値\n商圏人口 : 数値\n最寄り駅からの距離 : 数値\n駐車場台数 : 数値\n競合店舗数 : 数値\n月間売上高 : 数値\n\n\n\n\nそれぞれの詳細はテキストp.215を参照してください。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#散布図",
    "href": "POS_Marketing_07.html#散布図",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "\n7.2 散布図",
    "text": "7.2 散布図\n2変数の関係を視覚的に表すグラフとして散布図(scatter diagram)があります。 サンプルサイズが \\(i = 1,\\dots, n\\) この変数 \\(X\\) と \\(Y\\) の\\(i\\)番目の観測値を \\((x_i, y_i)\\) とすると、散布図はこれらの点を座標平面上にプロットしたものです。\nまず最寄り駅からの距離と月間売上高の散布図を描いてみます。 フォントの設定や見た目の設定をmystyleとしてlistにまとめておきます。\n\nmystyle &lt;- list(\n  theme_calc(base_family = \"HiraKakuPro-W3\"), # フォントの設定\n  scale_fill_tableau(name = \"Tableau 20\") # カラーパレットの設定\n)\n\nggplot2パッケージのggplot()関数を使い、geom_point()で散布図を描きます。\n\ndf |&gt;\n  ggplot() + aes(x = 最寄り駅からの距離, y = 月間売上高) + # 軸の設定\n  geom_point() + # 散布図の描画\n  labs(title = \"図7-1 最寄り駅からの距離と月間売上高の散布図\") + mystyle\n\n\n\n\n\n\n\nいろんな変数の組み合わせの散布図を描いてみます。 ここでは教科書に合わせて原点を0にしていますが、散布図ではかならずしも原点を0にする必要なないので、軸の範囲を指定しなくてもよいです。\n\ng1 &lt;- df |&gt;\n  ggplot() + aes(x = 店舗面積, y = 月間売上高) +\n  geom_point() +\n  xlim(0, 2000) + ylim(0,160000) +\n  labs(title = \"図7-2 店舗面積と月間売上高\") + mystyle\ng2 &lt;- df |&gt;\n  ggplot() + aes(x = 商圏人口, y = 月間売上高) +\n  geom_point() +\n  xlim(0, 350) + ylim(0,160000) +\n  labs(title = \"図7-3 商圏人口と月間売上高\") + mystyle\ng3 &lt;- df |&gt;\n  ggplot() + aes(x = 駐車場台数, y = 月間売上高) +\n  geom_point() +\n  xlim(0, 90) + ylim(0,160000) +\n  labs(title = \"図7-4 駐車場台数と月間売上高\") + mystyle\ng4 &lt;- df |&gt;\n  ggplot() + aes(x = 競合店舗数, y = 月間売上高) +\n  geom_point() +\n  xlim(0, 25) + ylim(0,160000) +\n  labs(title = \"図7-5 競合店舗数と月間売上高\") + mystyle\n(g1 + g2) / (g3 + g4)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#相関係数",
    "href": "POS_Marketing_07.html#相関係数",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "\n7.3 相関係数",
    "text": "7.3 相関係数\n2変数間の関係を数値で表す指標として相関係数(correlation coefficient)があります。\n\n\n相関係数という尺度にはいろんな種類があり、最もよく利用されているのがピアソンの積率相関係数です。 他にも、スピアマンの順位相関係数がありますが、最もよく利用されるのがピアソンの積率相関係数なので、 ここでは相関係数といえばピアソンの積率相関係数を指すことにします。\n店舗面積、商圏人口、駐車場台数、競合店舗数と月間売上高の相関係数を計算してみます。 Rには相関係数を返す基本関数としてcor()があります。 cor()関数とcorrplotパッケージのcorrplot()関数を使って相関係数行列を可視化します。\n\n\ncor()関数はデフォルトでピアソンの積率相関係数を計算します。 cor()は引数として2つ以上のベクトルを取り、それぞれの変数の相関係数を返します。 cor()関数の引数にuse = \"complete.obs\"を指定することで欠損値を含む行を削除して相関係数を計算することができます。 cor()関数の引数にuse = \"pairwise.complete.obs\"を指定することで欠損値を含む行を削除せずに相関係数を計算することができます。 またmethod = \"spearman\"を指定することでスピアマンの順位相関係数を計算することもできます。\n\npar(family= \"HiraKakuProN-W3\") # macの文字化け対策\ndf |&gt;\n  select(店舗面積, 商圏人口, 最寄り駅からの距離, 駐車場台数, 競合店舗数, 月間売上高) |&gt;　# 変数を選択\n  cor() |&gt; # 相関係数行列を計算\n  corrplot::corrplot(method = \"number\") # 相関係数行列を可視化\n\n\n\n\n\n\n\n月間売上高と相関関係があるのは、最寄り駅からの距離(\\(-0.71\\))と、商圏人口(\\(0.45\\))といえます。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#footnotes",
    "href": "POS_Marketing_07.html#footnotes",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "",
    "text": "用語法は文脈によって異なります。ここでの分類は完全に松浦の主観です。↩︎",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_06.html",
    "href": "POS_Marketing_06.html",
    "title": "\n6  第6回 売れる商品を入荷しよう\n",
    "section": "",
    "text": "6.1 準備\n週次集計POSデータを使って、他の店で売れている商品を見つけ出す。\nパッケージとデータを準備します。\n第6回ファイルで使うデータはchp6.xlsxです。 まずパッケージを読み込みます。\npacman::p_load(tidyverse, readxl, ggthemes, gt, gtExtras, patchwork, knitr)\n次にここで用いるchp6.xlsxのシート名を確認します。\nreadxl::excel_sheets(\"data/chp6.xlsx\")\n\n[1] \"小魚くんシリーズ週次データ\"  \"ピボットテーブル\"           \n[3] \"図6-2・図6-6・図6-9・図6-13\" \"表6-2・図6-5\"               \n[5] \"表6-3・図6-8\"                \"表6-4・図6-11\"              \n[7] \"表6-6・図6-15\"               \"表6-7・図6-17\"\nたくさんシートがあるMS Excelファイルですが、1番目の「小魚くんシリーズ週次データ」を読み込みます。\ndf &lt;- readxl::read_excel(\"data/chp6.xlsx\", sheet = 1)\nglimpse(df)\n\nRows: 79\nColumns: 9\n$ 対象週         &lt;chr&gt; \"2023/10/30週\", \"2023/11/06週\", \"2023/11/13週\", \"2023/1…\n$ 対象店舗数     &lt;dbl&gt; 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, …\n$ 来店客数       &lt;dbl&gt; 2549796, 2549898, 2549796, 2549765, 2549898, 2550102, 2…\n$ 商品名         &lt;chr&gt; \"定番味\", \"定番味\", \"定番味\", \"定番味\", \"定番味\", \"定番…\n$ 出現店舗数     &lt;dbl&gt; 80, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 81, 81, 81,…\n$ 出現店来店客数 &lt;dbl&gt; 2000080, 2025081, 2024919, 2025081, 2025000, 1999920, 1…\n$ 売上金額       &lt;dbl&gt; 2065350, 1988920, 2027100, 1936000, 2040620, 1947770, 2…\n$ 売上個数       &lt;dbl&gt; 13770, 13475, 13515, 12840, 13514, 12730, 13474, 13239,…\n$ 平均価格       &lt;dbl&gt; 150.0, 147.6, 150.0, 150.8, 151.0, 153.0, 149.1, 151.7,…\nこのデータフレームには、\nの9つの変数が含まれています。\n商品名をテーブルにしてみます。 「しびれ味」だけ測定期間の途中で販売が開始されたため，他の商品とはデータの個数が異なります。\ndf$商品名 |&gt; table() |&gt; t() |&gt; kable()\n\n\n\nクリスマス限定\nこだわり味\nしびれ味\nピリ辛味\n激辛味\n定番味\n\n\n14\n14\n9\n14\n14\n14",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>第6回 売れる商品を入荷しよう</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_06.html#店頭カバー率",
    "href": "POS_Marketing_06.html#店頭カバー率",
    "title": "\n6  第6回 売れる商品を入荷しよう\n",
    "section": "",
    "text": "対象週 : 文字列\n対象店舗数 : 数値\n来店客数 : 数値\n商品名 : 文字列\n出現店舗数 : 数値\n出現店来店客数 : 数値\n売上金額 : 数値\n売上個数 : 数値\n平均価格 : 数値\n\n\n\n\nそれぞれの詳細はテキストp.183を参照してください。\n\n\n\n6.1.1 出店カバー率\n出店カバー率を次のように定義します。\n\\[\n\\text{出店カバー率} = \\frac{\\text{出現店舗数}}{\\text{対象店舗数}} \\times 100\n\\]\n出店カバー率を計算して、dfに追加します。\n\ndf &lt;- df |&gt;\n  mutate(\n    出店カバー率 = 出現店舗数 / 対象店舗数 * 100\n    )\n\nこれを週ごとと商品ごとに集計してみます。\n\ndf_cover &lt;- df |&gt;\n  group_by(対象週, 商品名) |&gt;\n  summarise(\n    平均出店カバー率 = mean(出店カバー率)\n    ) |&gt;\n  ungroup()\n\n週と商品名ごとに出店カバー率の平均値を計算したので、商品名を列にして、列の順番を変えて、表として出力します。\n\ndf_cover |&gt;\n  pivot_wider(names_from = 商品名, values_from = 平均出店カバー率) |&gt; # ワイド型に\n  select(対象週, クリスマス限定, こだわり味, しびれ味, ピリ辛味, 激辛味, 定番味) |&gt; # 列の順番を変更\n  gt() |&gt; # 表を作成\n  fmt_number(columns = 2:7, decimals = 2) |&gt; # 2〜7列を小数点2桁に\n  tab_header(title = \"表6-2 6種の菓子の店頭カバー率の推移\") |&gt; # タイトルをつける\n  gt_theme_pff() # テーマを適用\n\n\n\n\n\n\n表6-2 6種の菓子の店頭カバー率の推移\n\n\n対象週\nクリスマス限定\nこだわり味\nしびれ味\nピリ辛味\n激辛味\n定番味\n\n\n\n\n2023/10/30週\n65.69\n75.49\nNA\n49.02\n19.61\n78.43\n\n\n2023/11/06週\n65.69\n75.49\nNA\n49.02\n20.59\n79.41\n\n\n2023/11/13週\n68.63\n75.49\nNA\n50.00\n19.61\n79.41\n\n\n2023/11/20週\n60.78\n73.53\nNA\n50.00\n21.57\n79.41\n\n\n2023/11/27週\n60.78\n75.49\nNA\n49.02\n33.33\n79.41\n\n\n2023/12/04週\n77.45\n75.49\n19.61\n50.00\n45.10\n78.43\n\n\n2023/12/11週\n77.45\n73.53\n21.57\n50.00\n50.98\n78.43\n\n\n2023/12/18週\n76.47\n75.49\n22.55\n50.00\n58.82\n78.43\n\n\n2023/12/25週\n59.80\n76.47\n29.41\n49.02\n62.75\n78.43\n\n\n2024/01/01週\n44.66\n73.79\n32.04\n49.51\n63.11\n77.67\n\n\n2024/01/08週\n44.66\n75.73\n33.01\n49.51\n65.05\n77.67\n\n\n2024/01/15週\n45.63\n75.73\n36.89\n49.51\n69.90\n78.64\n\n\n2024/01/22週\n46.60\n73.79\n40.78\n48.54\n69.90\n78.64\n\n\n2024/01/29週\n48.54\n75.73\n43.69\n48.54\n69.90\n78.64\n\n\n\n\n\n\nしびれ味は集計期間の途中から発売されたので、NAが含まれています。\n横軸を週、縦軸を出店カバー率の平均値としたグラフにしてみます。 ggplot()関数で、group = 商品名とすることで、商品ごとの折れ線グラフを作ります。\n\ndf_cover |&gt;\n  ggplot() + aes(x = 対象週, y = 平均出店カバー率, color = 商品名, group = 商品名) +\n  geom_line() + geom_point() + # 線と点を描く\n  theme_calc(base_family = \"HiraKakuPro-W3\") + # テーマを適用\n  # X軸のラベルを45度回転\n  labs(title = \"図6-5 6種の菓子の店頭カバー率の推移のグラフ\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_fill_tableau(name = \"Tableau 20\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>第6回 売れる商品を入荷しよう</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_06.html#pi値",
    "href": "POS_Marketing_06.html#pi値",
    "title": "\n6  第6回 売れる商品を入荷しよう\n",
    "section": "\n6.3 PI値",
    "text": "6.3 PI値\nPI値(Purchase Index)は次のように定義されます。\n\\[\n\\text{PI値} = \\frac{\\text{売上個数}}{\\text{来店客数}} \\times 1000(人)\n\\]\nPI値を計算して、dfに追加します。\n\ndf &lt;- df |&gt;\n  mutate(\n    PI値 = 売上個数 / 来店客数 * 1000\n    )\n\nこれを週ごとと商品ごとに集計してみます。 ほぼ先ほどの集計表のコードのコピペですが、PI値に変更しています。\n\ndf_pi &lt;- df |&gt;\n  group_by(対象週, 商品名) |&gt;\n  summarise(\n    平均PI値 = mean(PI値)\n    ) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by '対象週'. You can override using the\n`.groups` argument.\n\n# 作表\ndf_pi |&gt;\n  pivot_wider(names_from = 商品名, values_from = 平均PI値) |&gt;\n  ungroup() |&gt;\n  select(対象週, クリスマス限定, こだわり味, しびれ味, ピリ辛味, 激辛味, 定番味) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:7, decimals = 2) |&gt;\n  fmt_missing(columns = 2:7, missing_text = \"\") |&gt;\n  gt_color_rows(2:7, domain = c(0, 7), palette = \"ggsci::blue_material\") |&gt;\n  tab_header(title = \"表6-3: 6種の菓子の数量PIの推移\") |&gt;\n  tab_options(\n    heading.title.font.size = \"normal\",\n    table.font.size = \"small\"\n  ) |&gt;\n  gt_theme_pff()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表6-3: 6種の菓子の数量PIの推移\n\n\n対象週\nクリスマス限定\nこだわり味\nしびれ味\nピリ辛味\n激辛味\n定番味\n\n\n\n\n2023/10/30週\n4.70\n4.00\n\n4.50\n3.50\n5.40\n\n\n2023/11/06週\n4.80\n4.10\n\n4.50\n3.60\n5.28\n\n\n2023/11/13週\n4.90\n4.10\n\n4.50\n4.00\n5.30\n\n\n2023/11/20週\n4.30\n3.90\n\n4.40\n4.10\n5.04\n\n\n2023/11/27週\n5.00\n4.00\n\n4.60\n4.50\n5.30\n\n\n2023/12/04週\n5.70\n3.90\n0.80\n4.50\n4.80\n4.99\n\n\n2023/12/11週\n5.90\n3.90\n0.70\n4.60\n5.10\n5.28\n\n\n2023/12/18週\n5.00\n4.00\n1.20\n4.50\n5.00\n5.19\n\n\n2023/12/25週\n3.90\n4.10\n1.80\n4.60\n5.00\n5.40\n\n\n2024/01/01週\n3.88\n4.00\n2.00\n4.60\n4.80\n5.20\n\n\n2024/01/08週\n3.60\n3.90\n2.50\n4.40\n4.20\n5.30\n\n\n2024/01/15週\n4.50\n4.00\n3.20\n4.60\n4.20\n5.30\n\n\n2024/01/22週\n4.54\n3.90\n4.10\n4.60\n3.80\n5.08\n\n\n2024/01/29週\n4.20\n3.90\n4.30\n4.50\n3.50\n5.20\n\n\n\n\n\n\nPI値のグラフを描いてみます。\n\ndf_pi |&gt;\n  ggplot() + aes(x = 対象週, y = 平均PI値, color = 商品名, group = 商品名) +\n  geom_line() + geom_point() +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  labs(title = \"図6-8 6種の菓子の数量PIの推移のグラフ\") +\n  # X軸のラベルを45度回転\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n\n6.3.1 金額PI値\n金額PI値は次のように定義されます。\n\\[\n\\text{金額PI値} = \\frac{\\text{売上金額}}{\\text{来店客数}} \\times 1000(人)\n\\]\n金額PI値を計算して、dfに追加します。\n\ndf &lt;- df |&gt;\n  mutate(\n    金額PI値 = 売上金額 / 来店客数 * 1000\n    )\n\nこれを週ごとと商品ごとに集計してみます。\n\ndf_kinpi &lt;- df |&gt;\n  group_by(対象週, 商品名) |&gt;\n  summarise(\n    平均金額PI値 = mean(金額PI値)\n    ) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by '対象週'. You can override using the\n`.groups` argument.\n\n# 作表\ndf_kinpi |&gt;\n  pivot_wider(names_from = 商品名, values_from = 平均金額PI値) |&gt;\n  ungroup() |&gt;\n  select(対象週, クリスマス限定, こだわり味, しびれ味, ピリ辛味, 激辛味, 定番味) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:7, decimals = 2) |&gt;\n  fmt_missing(columns = 2:7, missing_text = \"\") |&gt;\n  gt_color_rows(2:7, domain = c(100, 1000), palette = \"ggsci::blue_material\") |&gt;\n  tab_header(title = \"表6-4: 6種の菓子の金額PIの推移\") |&gt;\n  tab_options(\n    heading.title.font.size = \"normal\",\n    table.font.size = \"small\"\n  ) |&gt;\n  gt_theme_pff()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表6-4: 6種の菓子の金額PIの推移\n\n\n対象週\nクリスマス限定\nこだわり味\nしびれ味\nピリ辛味\n激辛味\n定番味\n\n\n\n\n2023/10/30週\n756.70\n875.98\n\n679.49\n563.48\n810.01\n\n\n2023/11/06週\n758.43\n902.04\n\n679.53\n568.82\n780.00\n\n\n2023/11/13週\n779.10\n893.79\n\n670.50\n647.99\n795.00\n\n\n2023/11/20週\n692.37\n850.28\n\n655.66\n647.86\n759.29\n\n\n2023/11/27週\n799.97\n876.04\n\n694.63\n715.53\n800.28\n\n\n2023/12/04週\n912.03\n865.77\n127.19\n670.48\n777.57\n763.80\n\n\n2023/12/11週\n949.91\n861.88\n112.01\n690.00\n826.20\n788.15\n\n\n2023/12/18週\n809.37\n883.29\n191.86\n678.96\n804.37\n786.93\n\n\n2023/12/25週\n209.29\n893.76\n287.99\n685.37\n795.03\n804.63\n\n\n2024/01/01週\n243.13\n872.00\n324.00\n694.60\n768.00\n774.80\n\n\n2024/01/08週\n169.23\n850.30\n405.04\n655.65\n667.85\n789.75\n\n\n2024/01/15週\n246.99\n871.98\n505.58\n694.60\n676.19\n789.69\n\n\n2024/01/22週\n199.51\n854.08\n660.08\n685.40\n615.61\n788.83\n\n\n2024/01/29週\n182.01\n854.13\n683.72\n675.02\n553.02\n780.00\n\n\n\n\n\n\n金額PI値のグラフを描いてみます。\n\ndf_kinpi |&gt;\n  ggplot() + aes(x = 対象週, y = 平均金額PI値, color = 商品名, group = 商品名) +\n  geom_line() + geom_point() +\n  labs(title = \"図6-11 6種の菓子の金額PIの推移のグラフ\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  # X軸のラベルを45度回転\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_fill_tableau(name = \"Tableau 20\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>第6回 売れる商品を入荷しよう</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_06.html#隠れヒット商品を見つける",
    "href": "POS_Marketing_06.html#隠れヒット商品を見つける",
    "title": "\n6  第6回 売れる商品を入荷しよう\n",
    "section": "\n6.4 隠れヒット商品を見つける",
    "text": "6.4 隠れヒット商品を見つける\n特定店舗でのみ馬鹿売れしている隠れヒット商品を探すために出現店舗数ベースのPI値を調べる。 まず、出現店舗数ベースの数量PIと金額PIを計算します。\n\ndf &lt;- df |&gt;\n  mutate(\n    出現店数量PI = 売上個数 / 出現店来店客数 * 1000,\n    出現店金額PI = 売上金額 / 出現店来店客数 * 1000\n    )\n\nそれぞれの出現店ベースの尺度を表にします。\n\ndf_shutu_pi &lt;- df |&gt;\n  group_by(対象週, 商品名) |&gt;\n  summarise(\n    平均出現店数量PI = mean(出現店数量PI)\n    ) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by '対象週'. You can override using the\n`.groups` argument.\n\ndf_shutu_pi |&gt;\n  pivot_wider(names_from = 商品名, values_from = 平均出現店数量PI) |&gt;\n  ungroup() |&gt;\n  select(対象週, クリスマス限定, こだわり味, しびれ味, ピリ辛味, 激辛味, 定番味) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:7, decimals = 2) |&gt;\n  fmt_missing(columns = 2:7, missing_text = \"\") |&gt;\n  gt_color_rows(2:7, domain = c(3, 21), palette = \"ggsci::blue_material\") |&gt;\n  tab_header(title = \"表6-6: 6種類のスナック菓子の出現店・数量PIの推移\") |&gt;\n  tab_options(\n    heading.title.font.size = \"normal\",\n    table.font.size = \"small\"\n  ) |&gt;\n  gt_theme_pff()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表6-6: 6種類のスナック菓子の出現店・数量PIの推移\n\n\n対象週\nクリスマス限定\nこだわり味\nしびれ味\nピリ辛味\n激辛味\n定番味\n\n\n\n\n2023/10/30週\n7.16\n4.08\n\n9.18\n17.85\n6.88\n\n\n2023/11/06週\n7.31\n4.94\n\n9.18\n17.49\n6.65\n\n\n2023/11/13週\n7.14\n4.53\n\n9.00\n20.40\n6.67\n\n\n2023/11/20週\n7.07\n4.82\n\n8.80\n19.01\n6.34\n\n\n2023/11/27週\n8.23\n4.08\n\n9.38\n13.50\n6.67\n\n\n2023/12/04週\n7.36\n4.70\n4.08\n9.00\n10.64\n6.37\n\n\n2023/12/11週\n7.62\n4.42\n3.25\n9.20\n10.00\n6.74\n\n\n2023/12/18週\n6.54\n4.42\n5.32\n9.00\n8.50\n6.62\n\n\n2023/12/25週\n6.52\n4.12\n6.13\n9.38\n7.97\n6.89\n\n\n2024/01/01週\n8.69\n4.93\n6.24\n9.29\n7.61\n6.70\n\n\n2024/01/08週\n8.07\n3.96\n7.57\n8.88\n6.46\n6.82\n\n\n2024/01/15週\n9.86\n4.40\n8.67\n9.29\n6.01\n6.74\n\n\n2024/01/22週\n9.73\n4.07\n10.05\n9.48\n5.44\n6.46\n\n\n2024/01/29週\n8.65\n5.15\n9.84\n9.27\n5.01\n6.61\n\n\n\n\n\n\n\ndf_shutu_pi |&gt;\n  ggplot() + aes(x = 対象週, y = 平均出現店数量PI, color = 商品名, group = 商品名) +\n  geom_line() + geom_point() +\n  labs(title = \"図6-15: 6種類のスナック菓子の出現店数量PIの推移\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  # X軸のラベルを45度回転\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n出現店ベースの金額PIの表を出力します。\n\ndf_shutu_kin_pi &lt;- df |&gt;\n  group_by(対象週, 商品名) |&gt;\n  summarise(\n    平均出現店金額PI = mean(出現店金額PI)\n    ) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by '対象週'. You can override using the\n`.groups` argument.\n\ndf_shutu_kin_pi |&gt;\n  pivot_wider(names_from = 商品名, values_from = 平均出現店金額PI) |&gt;\n  ungroup() |&gt;\n  select(対象週, クリスマス限定, こだわり味, しびれ味, ピリ辛味, 激辛味, 定番味) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:7, decimals = 2) |&gt;\n  fmt_missing(columns = 2:7, missing_text = \"\") |&gt;\n  gt_color_rows(2:7, domain = c(300, 3400), palette = \"ggsci::blue_material\") |&gt;\n  tab_header(title = \"表6-7: 6種類のスナック菓子の出現店金額PI\") |&gt;\n  tab_options(\n    heading.title.font.size = \"normal\",\n    table.font.size = \"small\"\n  ) |&gt;\n  gt_theme_pff()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表6-7: 6種類のスナック菓子の出現店金額PI\n\n\n対象週\nクリスマス限定\nこだわり味\nしびれ味\nピリ辛味\n激辛味\n定番味\n\n\n\n\n2023/10/30週\n1,151.99\n892.54\n\n1,386.00\n2,873.65\n1,032.63\n\n\n2023/11/06週\n1,154.63\n1,086.32\n\n1,386.07\n2,762.63\n982.14\n\n\n2023/11/13週\n1,135.17\n986.49\n\n1,340.89\n3,304.22\n1,001.08\n\n\n2023/11/20週\n1,139.04\n1,051.24\n\n1,311.15\n3,003.20\n956.01\n\n\n2023/11/27週\n1,316.08\n892.59\n\n1,416.93\n2,146.58\n1,007.71\n\n\n2023/12/04週\n1,177.51\n1,042.72\n648.75\n1,340.90\n1,724.24\n973.92\n\n\n2023/12/11週\n1,226.27\n976.64\n519.31\n1,379.94\n1,620.44\n1,004.86\n\n\n2023/12/18週\n1,059.23\n975.79\n851.48\n1,358.93\n1,368.39\n1,004.05\n\n\n2023/12/25週\n349.99\n899.09\n979.24\n1,398.10\n1,267.13\n1,026.02\n\n\n2024/01/01週\n544.35\n1,074.27\n1,011.31\n1,402.88\n1,216.94\n997.55\n\n\n2024/01/08週\n378.88\n863.50\n1,226.92\n1,323.83\n1,026.48\n1,016.58\n\n\n2024/01/15週\n541.26\n959.40\n1,370.27\n1,402.64\n967.29\n1,004.18\n\n\n2024/01/22週\n428.13\n890.42\n1,618.83\n1,411.93\n880.74\n1,003.20\n\n\n2024/01/29週\n374.89\n1,127.79\n1,564.84\n1,390.33\n790.99\n991.74\n\n\n\n\n\n\n上の表をもとに折れ線グラフにします。\n\ndf_shutu_kin_pi |&gt;\n  ggplot() + aes(x = 対象週, y = 平均出現店金額PI, color = 商品名, group = 商品名) +\n  geom_line() + geom_point() +\n  labs(title = \"図6-17: 6種類のスナック菓子の出現店金額PIの推移\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  # X軸のラベルを45度回転\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_fill_tableau(name = \"Tableau 20\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>第6回 売れる商品を入荷しよう</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_02.html",
    "href": "POS_Marketing_02.html",
    "title": "\n2  第2回 顧客層別の売上\n",
    "section": "",
    "text": "2.1 はじめに\n年代ごとの客層に違いがあるのかや、自社と他社の顧客層に違いがあるのかを調べる方法を学ぶ。 クロス表の作成方法やカイ二乗検定の方法を学びます。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>第2回 顧客層別の売上</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_02.html#この章で使うファイルとパッケージ",
    "href": "POS_Marketing_02.html#この章で使うファイルとパッケージ",
    "title": "\n2  第2回 顧客層別の売上\n",
    "section": "\n2.2 この章で使うファイルとパッケージ",
    "text": "2.2 この章で使うファイルとパッケージ\n第2回ファイルで使うデータはchp2.xlsxです。\n\nchp2.xlsx\n\nパッケージを読み込みます。\n\noptions(scipen=100)\npacman::p_load(tidyverse, readxl, ggthemes, gt, gtExtras)\n\nreadxlパッケージを使ってデータchp2.xlsxを読み込んでみましょう。 前章と同様にこのExcelファイルのシートの一覧を表示してみます。\n\nreadxl::excel_sheets(\"data/chp2.xlsx\")\n\n[1] \"いつものPOSデータ\"    \"ピボットテーブル\"     \"表2-2・図2-2\"        \n[4] \"表2-3・図2-4\"         \"表2-4・表2-5・図2-12\" \"表2-6・図2-13\"       \n[7] \"表2-7・図2-14\"        \"表2-8・表2-10・検定\"  \"表2-11・表2-12・検定\"\n\n\n第1章のデータと同じでした。 「いつものPOSデータ」を読み込みたいので，特に指定せずにread_excel()関数を使って読み込みます。 ついでに文字列をカテゴリー変数として因子型に変換しておきます。\n\ndf &lt;- readxl::read_excel(\"data/chp2.xlsx\")\ndf &lt;- df %&gt;%\n  mutate(曜日 = factor(曜日, levels = c(\"月\", \"火\", \"水\", \"木\", \"金\", \"土\", \"日\"), ordered = TRUE),\n         性別 = factor(性別, levels = c(\"男性\", \"女性\"), ordered = TRUE),\n         年代 = factor(年代, levels = c(\"20歳未満\", \"20代\", \"30代\", \"40代\", \"50代\", \"60歳以上\"), ordered = TRUE),\n         メーカー = as.factor(メーカー),\n         商品名 = as.factor(商品名))\nhead(df) # 戦闘6行を表示\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n日付\n曜日\n時間\n性別\n年代\nメーカー\n商品名\n単価\n個数\n金額\n\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合A\nおいしい緑茶\n160\n2\n320\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合B\n静岡の緑茶\n170\n2\n340\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合B\n静岡の緑茶\n170\n4\n680\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合A\nおいしい濃茶\n160\n2\n320\n\n\nR000003\n2023-01-02\n月\n10\n男性\n50代\n競合C\nほうじ茶\n140\n1\n140\n\n\nR000004\n2023-01-02\n月\n10\n女性\n50代\n競合D\nウーロン茶\n140\n2\n280",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>第2回 顧客層別の売上</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_02.html#自社商品における購入者の属性を調べる",
    "href": "POS_Marketing_02.html#自社商品における購入者の属性を調べる",
    "title": "\n2  第2回 顧客層別の売上\n",
    "section": "\n2.3 自社商品における購入者の属性を調べる",
    "text": "2.3 自社商品における購入者の属性を調べる\n\n2.3.1 セグメンテーション\n顧客を属性で分類することをセグメンテーションといいます。 年代や性別といったセグメントごとの顧客の特徴を調べてみます。\nまずは自社商品におおける年代別と性別ごとの販売個数を計算してみましょう。\n\ndf_jisha_age_sex_num &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt; # 自社商品のみ抽出\n  group_by(年代, 性別) |&gt; # 年代と性別ごとに\n  summarise(販売個数合計 = sum(個数)) |&gt; # 個数を合計\n  ungroup() # グループ化解除\n\n`summarise()` has grouped output by '年代'. You can override using the\n`.groups` argument.\n\ndf_jisha_age_sex_num\n\n\n\n\n年代\n性別\n販売個数合計\n\n\n\n20歳未満\n男性\n2540\n\n\n20歳未満\n女性\n7838\n\n\n20代\n男性\n6979\n\n\n20代\n女性\n24164\n\n\n30代\n男性\n12075\n\n\n30代\n女性\n40730\n\n\n40代\n男性\n9826\n\n\n40代\n女性\n30477\n\n\n50代\n男性\n11000\n\n\n50代\n女性\n31457\n\n\n60歳以上\n男性\n6464\n\n\n60歳以上\n女性\n17291\n\n\n\n\n\n\n表が出力されましたが，いわゆる「ロング型」となっているため，表示に適した教科書のようなワイド型に変換してみましょう。 ついでに教科書のように，年代別合計を列に，性別ごとの合計を行に追加します。これが以外に面倒です。\n\ntotal_sex &lt;- df_jisha_age_sex_num |&gt;\n  group_by(性別) |&gt; # 性別ごとに\n  summarise(\n    合計 = sum(販売個数合計)\n    ) |&gt; # 個数を合計\n  ungroup() |&gt; # グループ化解除\n  pivot_wider(names_from = 性別, values_from = 合計) |&gt; # ワイドに\n  mutate(年代 = \"合計\") # 年代に\"合計\"を追加\n\ndf_jisha_age_sex_num |&gt; # ワイドに\n  pivot_wider(names_from = 性別, values_from = 販売個数合計) |&gt;\n  rbind(total_sex) |&gt; # 合計の行を追加\n  mutate( # 合計の列を追加\n    合計 = 女性 + 男性\n  ) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:4, decimals = 0) |&gt;\n  tab_header(title = \"表2-1 性別・年代ごとの購入回数をまとめてクロス集計表\")\n\n\n\n\n\n\n表2-1 性別・年代ごとの購入回数をまとめてクロス集計表\n\n\n年代\n男性\n女性\n合計\n\n\n\n\n20歳未満\n2,540\n7,838\n10,378\n\n\n20代\n6,979\n24,164\n31,143\n\n\n30代\n12,075\n40,730\n52,805\n\n\n40代\n9,826\n30,477\n40,303\n\n\n50代\n11,000\n31,457\n42,457\n\n\n60歳以上\n6,464\n17,291\n23,755\n\n\n合計\n48,884\n151,957\n200,841\n\n\n\n\n\n\n年代と性別の多重クロス表が完成しました。 販売個数ではなく，売上金額の表にしたい場合は，summarise(売上合計 = sum(金額))とすればよいです。\n\ndf_jisha_sale_age_sex &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  group_by(性別, 年代) |&gt;\n  summarise(\n    売上合計 = sum(金額)\n  ) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by '性別'. You can override using the\n`.groups` argument.\n\ndf_jisha_sale_age_sex |&gt;\n  pivot_wider(names_from = 性別, values_from = 売上合計) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:3, decimals = 0) |&gt;\n  tab_header(title = \"表2-2 性別・年代ごとの自社商品の売上金額\")\n\n\n\n\n\n\n表2-2 性別・年代ごとの自社商品の売上金額\n\n\n年代\n男性\n女性\n\n\n\n\n20歳未満\n381,000\n1,175,700\n\n\n20代\n1,046,850\n3,624,600\n\n\n30代\n1,811,250\n6,109,500\n\n\n40代\n1,473,900\n4,571,550\n\n\n50代\n1,650,000\n4,718,550\n\n\n60歳以上\n969,600\n2,593,650\n\n\n\n\n\n\n\n2.3.2 棒グラフによる可視化\n可視化するため，棒グラフにしてみる。 geom_col()関数で棒グラフを描画し，position = \"dodge\"で性別ごとに横並びの棒グラフにします。\n\ndf_jisha_sale_age_sex |&gt;\n  ggplot() + aes(x = 年代, y = 売上合計, fill = 性別) +\n  geom_col(position = \"dodge\") +\n  labs(title = \"図2-2 性別・年代ごとの自社商品の売上金額\",\n       x = \"年代\",\n       y = \"売上金額\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n積み上げ棒グラフにするなら，position = \"stack\"を指定します。 \n\ndf_jisha_sale_age_sex |&gt;\n  ggplot() + aes(x = 年代, y = 売上合計, fill = 性別) +\n  geom_col(position = \"stack\") +\n  labs(title = \"図2-2 自社商品の年代別・性別別売上金額\",\n       x = \"年代\",\n       y = \"売上金額\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n合計を1とした割合を示す積み上げ棒グラフにするなら，position = \"fill\"を指定します。\n\ndf_jisha_sale_age_sex |&gt;\n  ggplot() + aes(x = 年代, y = 売上合計, fill = 性別) +\n  geom_col(position = \"fill\") +\n  labs(title = \"図2-2 自社商品の年代別・性別別売上金額\",\n       x = \"年代\",\n       y = \"売上金額\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n売上個数のグラフも作成してみます。\n\ndf |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  group_by(年代, 性別) |&gt;\n  summarise(販売個数 = sum(個数)) |&gt;\n  ggplot() + aes(x = 年代, y = 販売個数, fill = 性別) +\n  geom_col(position = \"dodge\") +\n  labs(title = \"図2-4 性別・年代ごとの自社商品の売上個数\",\n       x = \"年代\",\n       y = \"販売個数\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n`summarise()` has grouped output by '年代'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n2.3.3 割合を見る\n表2-2の表を見ると，年代ごとの売上金額の合計が異なるため，単純に比較することができません。そこで売上高合計に占める割合を見てみます。\n\ndf_jisha_sale_age_sex |&gt;\n  mutate( # 割合を計算し，小数点以下2桁で丸める\n    割合 = 売上合計 / sum(売上合計) * 100\n  ) |&gt;\n  select(年代, 性別, 割合) |&gt; # 必要な列だけ抽出\n  pivot_wider(names_from = 性別, values_from = 割合) |&gt;\n  mutate( # 性別ごとの合計を追加\n    合計 = 女性 + 男性\n  ) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:4, decimals = 2) |&gt;\n  tab_header(title = \"表2-4 自社商品の売上金額における性別・年代の比率(%)\")\n\n\n\n\n\n\n表2-4 自社商品の売上金額における性別・年代の比率(%)\n\n\n年代\n男性\n女性\n合計\n\n\n\n\n20歳未満\n1.26\n3.90\n5.17\n\n\n20代\n3.47\n12.03\n15.51\n\n\n30代\n6.01\n20.28\n26.29\n\n\n40代\n4.89\n15.17\n20.07\n\n\n50代\n5.48\n15.66\n21.14\n\n\n60歳以上\n3.22\n8.61\n11.83\n\n\n\n\n\n\n次に売上全体に対する割合ではなく，性別ごとの合計に対する割合を示す表を作成してみます。\n\ndf_row_ratio &lt;- df_jisha_sale_age_sex |&gt;\n  pivot_wider(names_from = 性別, values_from = 売上合計) |&gt;\n  mutate(\n    女性 = 女性 / sum(女性) * 100,\n    男性 = 男性 / sum(男性) * 100\n  ) |&gt;\n  select(年代, 女性, 男性)\ndf_row_ratio |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:3, decimals = 2) |&gt;\n  tab_header(title = \"表2-5 各性別を100%とした場合の性別に対する年代の比率 (%)\")\n\n\n\n\n\n\n表2-5 各性別を100%とした場合の性別に対する年代の比率 (%)\n\n\n年代\n女性\n男性\n\n\n\n\n20歳未満\n5.16\n5.20\n\n\n20代\n15.90\n14.28\n\n\n30代\n26.80\n24.70\n\n\n40代\n20.06\n20.10\n\n\n50代\n20.70\n22.50\n\n\n60歳以上\n11.38\n13.22\n\n\n\n\n\n\n性別ごとの年代の比率から棒グラフを作成します。\n\ndf_row_ratio |&gt;\n  pivot_longer(cols = c(女性, 男性), names_to = \"性別\", values_to = \"割合\") |&gt;\n  ggplot() + aes(x = 年代, y = 割合, fill = 性別) +\n  geom_col(position = \"fill\") +\n  labs(title = \"図2-9 帯グラフの作成\",\n       x = \"年代\",\n       y = \"割合\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\") +\n  # グラフを横向き\n  coord_flip()\n\n\n\n\n\n\n\n次に，性別ごとの年代別の割合を見てみます。\n\ndf_row_ratio |&gt;\n  pivot_longer(cols = c(女性, 男性), names_to = \"性別\", values_to = \"割合\") |&gt;\n  ggplot() + aes(x = 性別, y = 割合, fill = 年代) +\n  geom_col(position = \"fill\") +\n  labs(title = \"図2-10 帯グラフの作成\",\n       x = \"性別\",\n       y = \"割合\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  #カラーパレットを変更\n  scale_fill_tableau(name = \"Tableau 20\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n2.3.4 年代別・性別ごとの購入者の属性を調べる\n\ndf_sales_total &lt;- df |&gt;\n  dplyr::filter(メーカー == \"自社\") |&gt;\n  group_by(年代, 性別) |&gt;\n  summarise(\n    売上合計 = sum(金額),\n    .groups = \"drop\"\n  ) |&gt;\n  ungroup() |&gt;\n  pivot_wider(names_from = 性別, values_from = c(売上合計))\n\ndf_sales_total |&gt;\n  rowwise() |&gt;  # 行ごとに処理\n  mutate(\n    # 年代以外の列で，行を合計で割る\n    across(-年代, ~ . / sum(c_across(-年代), na.rm = TRUE))\n    ) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:3, decimals = 2) |&gt;\n  tab_header(title = \"表2-3 自社商品の年代別・性別別売上金額\")\n\n\n\n\n\n\n表2-3 自社商品の年代別・性別別売上金額\n\n\n年代\n男性\n女性\n\n\n\n\n20歳未満\n0.24\n0.76\n\n\n20代\n0.22\n0.78\n\n\n30代\n0.23\n0.77\n\n\n40代\n0.24\n0.76\n\n\n50代\n0.26\n0.74\n\n\n60歳以上\n0.27\n0.73",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>第2回 顧客層別の売上</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_02.html#競合商品との属性の違い",
    "href": "POS_Marketing_02.html#競合商品との属性の違い",
    "title": "\n2  第2回 顧客層別の売上\n",
    "section": "\n2.4 2-2 競合商品との属性の違い",
    "text": "2.4 2-2 競合商品との属性の違い\n競合する商品の売り上げ個数を，性別・年代ごとに集計してみる。\n\ndf_maker_age_sex &lt;- df |&gt;\n  group_by(メーカー, 年代, 性別) |&gt;\n  summarise(販売個数 = sum(個数), .groups = \"drop\") |&gt;\n  ungroup()\n\n競合A社の性別・年代ごとの売上個数を見てみる。\n\ndf_maker_age_sex |&gt;\n  filter(メーカー == \"競合A\")|&gt;\n  pivot_wider(names_from = 性別, values_from = 販売個数) |&gt;\n  select(-メーカー) |&gt;\n  mutate(\n    合計 = 男性 + 女性\n  ) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:4, decimals = 0) |&gt;\n  tab_header(title = \"表2-6 年代・性別ごとの競合A社の売上個数\")\n\n\n\n\n\n\n表2-6 年代・性別ごとの競合A社の売上個数\n\n\n年代\n男性\n女性\n合計\n\n\n\n\n20歳未満\n3,964\n9,813\n13,777\n\n\n20代\n8,235\n22,661\n30,896\n\n\n30代\n12,788\n35,578\n48,366\n\n\n40代\n15,132\n38,297\n53,429\n\n\n50代\n21,789\n51,643\n73,432\n\n\n60歳以上\n13,267\n33,680\n46,947\n\n\n\n\n\n\n棒グラフにしてみる。\n\ndf_maker_age_sex |&gt;\n    filter(メーカー == \"競合A\")|&gt;\n    ggplot() + aes(x = 年代, y = 販売個数, fill = 性別) +\n    geom_col(position = \"dodge\") +\n    labs(title = \"図2-13 競合A社の年代別・性別別売上個数\",\n         x = \"年代\",\n         y = \"販売個数\") +\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n自社と競合A社を比較してみます。\n\n# 自社とA社の比較\ndf_ji_A_item &lt;- df_maker_age_sex |&gt;\n  filter(メーカー %in% c(\"自社\", \"競合A\")) |&gt; # 自社と競合A社のみ抽出\n  pivot_wider(names_from = メーカー, values_from = 販売個数) |&gt; # ワイド\n  select(年代, 性別, 自社, 競合A) # 必要な変数のみ選択\n\n# 全体売上個数を計算する\ndf_total_item &lt;- df |&gt;\n  group_by(年代, 性別) |&gt; # 年代と性別ごとに\n  summarise(合計 = sum(個数), .groups = \"drop\") # 売上個数を合計\n\n# 自社とA社のデータフレームと全体のデータフレームを結合\ndf_ji_A_item &lt;- df_ji_A_item |&gt;\n  left_join(df_total_item, by = c(\"年代\", \"性別\"))\n# 作表\ndf_ji_A_item |&gt;\n  arrange(性別) |&gt;\n  group_by(性別) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 3:5, decimals = 0) |&gt;\n  tab_header(title = \"表2-7 自社と競合A社の年代・性別別売上個数\")\n\n\n\n\n\n\n表2-7 自社と競合A社の年代・性別別売上個数\n\n\n年代\n自社\n競合A\n合計\n\n\n\n\n男性\n\n\n20歳未満\n2,540\n3,964\n9,264\n\n\n20代\n6,979\n8,235\n21,738\n\n\n30代\n12,075\n12,788\n35,757\n\n\n40代\n9,826\n15,132\n35,443\n\n\n50代\n11,000\n21,789\n46,809\n\n\n60歳以上\n6,464\n13,267\n28,181\n\n\n女性\n\n\n20歳未満\n7,838\n9,813\n24,904\n\n\n20代\n24,164\n22,661\n67,154\n\n\n30代\n40,730\n35,578\n108,567\n\n\n40代\n30,477\n38,297\n97,851\n\n\n50代\n31,457\n51,643\n119,413\n\n\n60歳以上\n17,291\n33,680\n72,066\n\n\n\n\n\n\n割合棒グラフにしてみます。\n\ndf_ji_A_item |&gt;\n  pivot_longer(cols = -c(年代, 性別), names_to = \"メーカー\", values_to = \"販売個数\") |&gt;\n  mutate(\n    年代性別 = paste0(年代, 性別),\n    年代性別 = factor(年代性別, levels = rev(unique(年代性別))),\n    メーカー = factor(メーカー, levels = c(\"自社\", \"競合A\", \"合計\"))\n    ) |&gt;\n  select(年代性別, メーカー, 販売個数) |&gt;\n  ggplot() + aes(x = メーカー, y = 販売個数, fill = 年代性別) + geom_col(position = \"fill\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  #カラーパレットを変更\n  scale_fill_brewer(palette = \"Paired\") +\n  coord_flip()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>第2回 顧客層別の売上</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_02.html#統計的推定",
    "href": "POS_Marketing_02.html#統計的推定",
    "title": "\n2  第2回 顧客層別の売上\n",
    "section": "\n2.5 統計的推定",
    "text": "2.5 統計的推定\n統計学において，関心のある調査対象全体を母集団(population)といいます。 通常，母集団は非常に大きいデータであるため，全てのデータを調査することはコストや手間の面で非常に困難です。 母集団の平均や分散といった統計量を母数(parameter)といい，通常母数は観察不可能な値と考えます。\nそこで，母集団から一部を抽出して調査することにします。 この母集団から抽出された，母集団より数ケタ小さな一式のデータを標本(sample)といいます。 この標本の平均や分散といった集約した値を統計量(statistic)といい，標本平均や標本分散は計算可能な値です。 統計学では，全体を見ることなく，その一部である標本を見ることで，母集団の特性を推定することを目的としています。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>第2回 顧客層別の売上</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_02.html#カテゴリー変数間の関連性の検定",
    "href": "POS_Marketing_02.html#カテゴリー変数間の関連性の検定",
    "title": "\n2  第2回 顧客層別の売上\n",
    "section": "\n2.6 カテゴリー変数間の関連性の検定",
    "text": "2.6 カテゴリー変数間の関連性の検定\n次に，ある特性をもつ2つの集団(カテゴリー)が関連しているかどうかを検定する方法を学びます。 カテゴリーに属するかということを表す変数をカテゴリー変数といいます。 たとえば，男なら1，女なら0といった性別カテゴリーの変数や，20代や50代といった年代に属するかどうかを表すカテゴリー変数があります。 このような2つのカテゴリー変数の関連性を調べるためにはクロス集計表を作ることが有益です。\n例えば、1学年400名の生徒うち、男が245名、女が155名いるとしましょう。 その学年の中で、メガネをかけている男が41名、メガネを掛けている女が81名いました。 このクロス集計表は次のようなものになります。\n\n\n\nメガネをかけている\nメガネをかけていない\n合計\n\n\n\n男\n41\n204\n245\n\n\n女\n81\n74\n155\n\n\n合計\n122\n278\n400\n\n\n\nこの表から、メガネをかけている人の割合は、男性の中で \\(41\\div 245 =\\) 0.1673469、女性の中で \\(81 \\div 155 =\\) 0.52であることから、女子学生の方がメガネをかけている割合が高いことが分かりました。\n\n2.6.1 カイ二乗検定\nこのクロス集計表から読み取れる関係が、統計的に意味があるのかどうかを調べるためには、\\(\\chi ^2\\)(カイ二乗)検定を行います。 \\(\\chi^2\\)検定は次のステップで実行します。\n\n\n帰無仮説として、カテゴリー変数間に関連性はないと仮定\nその仮定のもとで、観測されたクロス集計表の度数が、理論的に予測される度数と大きく異なるかどうかを検定\n予測される度数と観測された度数の差が大きいほど、帰無仮説が棄却され，対立仮説が採択される\n\n\\(\\chi^2\\)検定で用いられる統計量は、\\(\\chi^2\\)統計量と呼ばれ、次の式で計算されます。\n\\[\n\\chi^2 = \\sum_{i=1}^n \\sum_{j=1}^m \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\n\\] ここで、\\(O_{ij}\\)は観測された度数(観測度数)、\\(E_{ij}\\)は理論的に予測される度数(期待度数)です。\\(n\\)と\\(m\\)はカテゴリー変数のカテゴリー数です。 つまり、2つのカテゴリー変数の関連性を調べる場合、\\(\\chi^2\\)統計量は次のように計算されます。\n\\[\n\\begin{aligned}\n\\chi^2 &= \\frac{(O_{11} - E_{11})^2}{E_{11}} + \\frac{(O_{12} - E_{12})^2}{E_{12}} \\\\\n&+ \\frac{(O_{21} - E_{21})^2}{E_{21}} + \\frac{(O_{22} - E_{22})^2}{E_{22}}\n\\end{aligned}\n\\]\nここで、期待度数\\(E\\)をどうやって求めるのか、が問題となります。 期待度数の「期待」の意味は、帰無仮説のもとで期待される度数です。\n\\[\nE_{ij} = \\frac{O_{i\\cdot} \\times O_{\\cdot j}}{O_{\\cdot \\cdot}}\n\\] ここで、\\(O_{i\\cdot}\\)は\\(i\\)行目の合計(横の合計)、\\(O_{\\cdot j}\\)は\\(j\\)列目の合計(縦の合計)、\\(O_{\\cdot \\cdot}\\)は全体の合計です。\n先のメガネの例で計算してみます。 観察度数\\(O\\)は次のようになります。\n\n\n\nメガネをかけている\nメガネをかけていない\n合計\n\n\n\n男\n41\n204\n245\n\n\n女\n81\n74\n155\n\n\n合計\n122\n278\n400\n\n\n\n男の行合計\\(O_{男\\cdot}\\)は245、女の行合計\\(O_{女\\cdot}\\)は155、メガネ有りの列合計\\(O_{\\cdot メガネ有}\\)は122、メガネなしの列合計\\(O_{\\cdot メガネ無}\\)は278、全体の合計\\(O_{\\cdot \\cdot}\\)は400となります。 ここから、期待度数は次のように計算されます。\n\\[\n\\begin{aligned}\nE_{男, メガネ}   &= \\frac{245 \\times 122}{400} = 74.725 \\\\\nE_{男, メガネ無} &= \\frac{245 \\times 278}{400} = 170.275 \\\\\nE_{女, メガネ}  &= \\frac{155 \\times 122}{400} = 47.275 \\\\\nE_{女, メガネ無} &= \\frac{155 \\times 278}{400} = 107.725\n\\end{aligned}\n\\]\nよって期待度数\\(E\\)は次のようになります。\n\n\n\nメガネをかけている\nメガネをかけていない\n合計\n\n\n\n男\n74.725\n170.275\n245\n\n\n女\n47.275\n107.725\n155\n\n\n合計\n122\n278\n400\n\n\n\nここから、定義通りに、\\(\\chi^2\\)統計量を計算します。\n\\[\n\\begin{aligned}\n\\chi^2 = \\frac{(41 - 74.725)^2}{74.725} + \\frac{(204 - 170.275)^2}{170.275} + \\frac{(81 - 47.275)^2}{47.275} + \\frac{(74 - 107.725)^2}{107.725} =  56.51731\n\\end{aligned}\n\\]\nここで計算した\\(\\chi^2\\)統計量56.51731は、自由度1の\\(\\chi^2\\)分布に従うということが知られています。 この自由度は、カテゴリー変数のカテゴリー数から1を引いたものです。 ここでは、2カテゴリー同士のクロス集計表なので、自由度は\\((2-1) \\times (2-1) = 1\\)となります。\n自由度1のカイ二乗分布の確率密度関数は次のようになります。\n\nx = c(1:2500) / 250 # 数列を作成\ny1 = dchisq(x,1) # カイ二乗分布の確率密度\n\ndf_2 &lt;- data.frame(x, y1) # データフレームを作成\np &lt;- ggplot(df_2) + aes(x = x,y = y1) + geom_line(linewidth = 1) # 折れ線グラフ\np &lt;- p +\n    scale_y_continuous(expand = c(0,0), limits = c(0,1)) +\n    scale_x_continuous(expand = c(0,0), limits = c(-0.1,10)) +\n    ylab(\"密度\") + xlab(\"カイ二乗値\") + ggtitle(\"自由度1のχ2分布の確率密度\") +\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    scale_fill_tableau(name = \"Tableau 20\")\nprint(p)\n\nWarning: Removed 34 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n参考までに、自由度が変わると\\(\\chi^2\\)分布の形状は次のようなものになります。\n\ndf_chi_graph &lt;- data.frame(\n  x = c(1:2500) / 250,\n  y1 = dchisq(x,1), # 自由度1のカイ二乗分布の確率密度\n  y3 = dchisq(x,3), # 自由度3のカイ二乗分布の確率密度\n  y5 = dchisq(x,5) # 自由度5のカイ二乗分布の確率密度\n)\ndf_chi_graph &lt;- df_chi_graph %&gt;%\n  pivot_longer(names_to = \"y\",values_to = \"value\",cols = -x) # データを長く整形\np &lt;- ggplot(df_chi_graph) + aes(x = x,y = value, group = y, color = y) # 作図\np &lt;- p + geom_line(linewidth = 1) # 折れ線グラフ\np &lt;- p + ylab(\"密度\") + xlab(\"カイ二乗値\") +\n  scale_y_continuous(expand = c(0,0), limits = c(0,1)) +\n  scale_x_continuous(expand = c(0,0), limits = c(-0.1,10))\np &lt;- p + ggtitle(\"自由度1,3,5のχ2分布の確率密度\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\nprint(p)\n\nWarning: Removed 34 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n自由度1の\\(\\chi^2\\)分布における有意水準5%の値を調べるにはqchisq()関数を使います。引数は、pに確率、dfに自由度を指定します。\n\nalpha &lt;- 0.05  # 有意水準（ここでは5%）\ndegf &lt;- 1        # 自由度\nqchisq(1 - 0.05, 1)\n\n[1] 3.841459\n\n# qchisq(1 - alpha, degf)\n\n自由度1のカイ二乗分布における有意水準5%の値は3.84であることが分かりました。 この値を超えると、有意水準5%で帰無仮説を棄却することになります。\nでは先程計算した\\(\\chi^2\\)統計量は、有意水準5%で帰無仮説を棄却するかどうかを調べてみましょう。\n\nchi2 &lt;- 56.51731\nqchisq(1 - alpha, degf) &lt; chi2\n\n[1] TRUE\n\n\nより、 \\(\\chi^2\\) 統計量 \\(56.51731\\) は有意水準5%で帰無仮説を棄却することが分かりました。 ちなみに、自由度1のカイ二乗分布の確率密度関数と\\(\\chi^2\\)統計量の位置を重ねてみると次のようになります。\n\ndf_chi_graph |&gt;\n  pivot_wider(names_from = \"y\", values_from = \"value\") |&gt; # ワイド型に変換\n  # 折れ線グラフを作成\n  ggplot() + aes(x = x, y = y1) + geom_line(linewidth = 1) +\n  geom_vline(xintercept = chi2, linetype = \"dashed\", color = \"red\") +\n  annotate(\"text\", x = chi2, y = 0.1, label = \"χ2 statistics\", color = \"red\") +\n  # グラフの見た目の設定\n  ggtitle(\"自由度1のχ2分布の確率密度\") +  # タイトル\n  ylab(\"密度\") + xlab(\"カイ二乗値\") + # 軸ラベル\n  scale_y_continuous(expand = c(0,0), limits = c(0,1)) +\n  scale_x_continuous(expand = c(0,0), limits = c(-0.1,60)) +\n  theme_bw(base_family = \"HiraKakuPro-W3\") + # テーマの設定\n  scale_fill_tableau(name = \"Tableau 20\") # カラーパレットの設定\n\n\n\n\n\n\n\nこのように、\\(\\chi^2\\)統計量は、自由度1のカイ二乗分布のもとで生じる確率は、\n\n1 - pchisq(chi2, df = 1)\n\n[1] 0.0000000000000557332\n\n\nとなり、非常に小さな値であることが分かりました。 つまり、2つのカテゴリー変数の間に関係がない、という帰無仮説の下で、観測された度数が発生することはほぼありえない、ということが言えるので、帰無仮説は棄却され、2つのカテゴリー変数には関係があると結論付けられます。\n\n2.6.2 Rでχ2検定\nRではchisq.test()関数を使ってχ2検定を行うことができます。 引数は、xに度数表、correctに補正を行うかどうか、pに期待度数を指定します。\n先ほどの男女とメガネの例をここでも使ってみます。 まずmatrix()関数を使ってクロス集計表を行列として作成します。\n\nO &lt;- matrix(c(41, 81, 204, 74), nrow = 2, ncol = 2)\nrow.names(O) &lt;- c(\"男性\", \"女性\")\ncolnames(O) &lt;- c(\"メガネ\", \"メガネなし\")\n\nE &lt;- matrix(c(\n  sum(O[,1])*sum(O[1,])/sum(O), #男眼鏡\n  sum(O[,1])*sum(O[2,])/sum(O), #男眼鏡無\n  sum(O[,2])*sum(O[1,])/sum(O), #女眼鏡\n  sum(O[,2])*sum(O[2,])/sum(O)  #女眼鏡無\n), nrow = 2, ncol = 2)\n\nprint(O)\n\n     メガネ メガネなし\n男性     41        204\n女性     81         74\n\nprint(E)\n\n       [,1]    [,2]\n[1,] 74.725 170.275\n[2,] 47.275 107.725\n\n\nこの観察度数と期待度数から、定義通りに\\(\\chi^2\\)統計量を計算してみます。\n\nchi &lt;-  ((O[1,1] - E[1,1])^2 / E[1,1]) + #男眼鏡\n        ((O[1,2] - E[1,2])^2 / E[1,2]) + #男眼鏡無\n        ((O[2,1] - E[2,1])^2 / E[2,1]) + #女眼鏡\n        ((O[2,2] - E[2,2])^2 / E[2,2])   #女眼鏡無\nprint(chi)\n\n[1] 56.51731\n\n\n\\(\\chi^2\\) 統計量が 56.5173098 となりました。 この \\(\\chi^2\\) 統計量が自由度1の \\(\\chi^2\\) 分布にしたがう場合，この統計量が得られる確率は次のようになります。\n\nprop &lt;- 1 - pchisq(chi, df = 1)\nprint(prop)\n\n[1] 0.0000000000000557332\n\n\nこの確率は0.0000000000000055733となり，ほぼゼロであることが分かりました。 よって、2つのカテゴリー変数は無関係である，という帰無仮説は棄却され、2つのカテゴリー変数には関係があると結論付けられます。\nちなみに，上記のようなめんどくさい処理をしなくても，Rにはchisq.test()という関数が用意されています。 chisq.test()は引数として、xに度数表、correctに補正を行うかどうか、pに期待度数を指定します。 補正は行わないので，correctはFALSEとします。 pはデフォルトで等確率となっているので，今回は省略します。\n\nchisq.test(O, correct = FALSE)\n\n\n    Pearson's Chi-squared test\n\ndata:  O\nX-squared = 56.517, df = 1, p-value = 0.00000000000005571\n\n\nとなり，先ほどの結果と一致しました。\n各マスに入る度数が少ない場合には、フィッシャーの直接確率検定を使います。\n\nfisher.test(O)\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  O\np-value = 0.0000000000001204\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n 0.1127341 0.2982245\nsample estimates:\nodds ratio \n 0.1845096 \n\n\n\n2.6.3 自社商品の売上個数における性別と年代の差\n表2−3のクロス集計表を標本とみなして、この標本から母集団の性別・年代ごとに売上個数の差があるのかどうかを検証します。 ここでは、\n\n\n\\(H_0\\): 性別と年代による売上個数の差はない\n\n\\(H_1\\): 性別と年代による売上個数の差はある\n\nこの仮説を検定するために、\\(\\chi^2\\)検定を行います。 年代別・性別ごとの売上個数のクロス集計表を作成します。\n\ndf_chi2 &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  group_by(年代, 性別) |&gt;\n  summarise(販売個数 = sum(個数), .groups = \"drop\") |&gt;\n  pivot_wider(names_from = 性別, values_from = 販売個数)\n\ndf_chi2はdata.frame型なので、そのままではchisq.test()関数に渡すことができません。 そのため、matrix型に変換します。\n\nmat_chi2 &lt;- as.matrix(df_chi2[,2:3])\nmat_chi2\n\n      男性  女性\n[1,]  2540  7838\n[2,]  6979 24164\n[3,] 12075 40730\n[4,]  9826 30477\n[5,] 11000 31457\n[6,]  6464 17291\n\n\n作成した行列型mat_chi2を使って\\(\\chi^2\\)検定を行います。\n\nchisq.test(mat_chi2, correct = FALSE)\n\n\n    Pearson's Chi-squared test\n\ndata:  mat_chi2\nX-squared = 288.42, df = 5, p-value &lt; 0.00000000000000022\n\n\n\\(\\chi^2\\) 値が288.42となり、 \\(p\\) 値が0.00000000000000022とほぼゼロとなっていることから、 「自社と競合A社の年代・性別別売上個数に差がない」という帰無仮説は棄却されました。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>第2回 顧客層別の売上</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_03.html",
    "href": "POS_Marketing_03.html",
    "title": "\n3  第3回 売上の時系列データ分析\n",
    "section": "",
    "text": "3.1 はじめに\nパッケージとデータを準備する。\n第3回ファイルで使うデータはchp3.xlsxです。\nパッケージを読み込みます。\npacman::p_load(tidyverse, readxl, ggthemes, gt, gtExtras)\n「いつものPOSデータ」を読み込みます。 ついでに文字列をカテゴリー変数として因子型に変換しておきます。\ndf &lt;- readxl::read_excel(\"data/chp3.xlsx\")\ndf &lt;- df %&gt;%\n  mutate(曜日 = factor(曜日, levels = c(\"月\", \"火\", \"水\", \"木\", \"金\", \"土\", \"日\"), ordered = TRUE),\n         性別 = factor(性別, levels = c(\"男性\", \"女性\"), ordered = TRUE),\n         年代 = factor(年代, levels = c(\"20歳未満\", \"20代\", \"30代\", \"40代\", \"50代\", \"60歳以上\"), ordered = TRUE),\n         メーカー = as.factor(メーカー),\n         商品名 = as.factor(商品名))\nhead(df) # 戦闘6行を表示\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n日付\n曜日\n時間\n性別\n年代\nメーカー\n商品名\n単価\n個数\n金額\n\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合A\nおいしい緑茶\n160\n2\n320\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合B\n静岡の緑茶\n170\n2\n340\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合B\n静岡の緑茶\n170\n4\n680\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合A\nおいしい濃茶\n160\n2\n320\n\n\nR000003\n2023-01-02\n月\n10\n男性\n50代\n競合C\nほうじ茶\n140\n1\n140\n\n\nR000004\n2023-01-02\n月\n10\n女性\n50代\n競合D\nウーロン茶\n140\n2\n280",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>第3回 売上の時系列データ分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_03.html#はじめに",
    "href": "POS_Marketing_03.html#はじめに",
    "title": "\n3  第3回 売上の時系列データ分析\n",
    "section": "",
    "text": "chp3.xlsx",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>第3回 売上の時系列データ分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_03.html#商品と月ごとの売上個数",
    "href": "POS_Marketing_03.html#商品と月ごとの売上個数",
    "title": "\n3  第3回 売上の時系列データ分析\n",
    "section": "\n3.2 商品と月ごとの売上個数",
    "text": "3.2 商品と月ごとの売上個数\n\ndf &lt;- df |&gt;\n    mutate(\n        分類 = paste0(メーカー, 商品名),\n        月 = lubridate::month(日付),\n        月 = factor(月, levels = unique(月)),\n        月日 = paste0(month(日付), \"月\", day(日付), \"日\"),\n    )\n\ndf_month_item &lt;- df |&gt;\n    group_by(分類, 月) |&gt;\n    summarise(売上個数 = sum(個数))\n\n`summarise()` has grouped output by '分類'. You can override using the\n`.groups` argument.\n\ndf_month_item |&gt;\n    pivot_wider(names_from = 分類, values_from = 売上個数) |&gt;\n    gt()|&gt;\n    fmt_number(columns = 2:8, decimals = 0)\n\n\n\n\n\n月\n競合Aおいしい濃茶\n競合Aおいしい緑茶\n競合B静岡の緑茶\n競合Cほうじ茶\n競合Dウーロン茶\n自社濃い茶\n自社緑茶\n\n\n\n1\n5,569\n8,344\n4,264\n3,397\n2,740\n4,183\n6,332\n\n\n2\n4,881\n7,119\n3,528\n2,892\n2,409\n3,535\n5,251\n\n\n3\n6,447\n9,776\n4,928\n4,005\n3,264\n4,719\n7,343\n\n\n4\n7,753\n11,761\n5,854\n5,009\n3,849\n6,032\n8,893\n\n\n5\n8,987\n13,588\n6,428\n5,571\n4,526\n6,601\n10,106\n\n\n6\n8,158\n12,072\n6,319\n4,989\n4,086\n6,058\n9,199\n\n\n7\n13,690\n20,222\n10,119\n8,583\n6,890\n10,407\n15,222\n\n\n8\n14,509\n22,650\n11,207\n9,291\n7,315\n11,348\n16,865\n\n\n9\n12,366\n19,143\n9,663\n7,941\n6,310\n9,769\n14,228\n\n\n10\n10,353\n15,540\n7,273\n6,339\n5,083\n7,666\n11,589\n\n\n11\n7,754\n11,427\n5,514\n4,742\n3,985\n5,680\n8,592\n\n\n12\n6,063\n8,675\n4,535\n3,596\n3,015\n4,462\n6,761\n\n\n\n\n\n\n\ndf_month_item |&gt;\n    ggplot(aes(x = 月, y = 売上個数, group = 分類, color = 分類)) +\n    geom_line() +\n    geom_point() +\n    theme(legend.position = \"top\") +\n    labs(title = \"商品と月ごとの売上個数\",\n         x = \"月\", y = \"売上個数\") +\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n個人的に気に入っているグラフの描き方です。\n\ndf_name &lt;- df_month_item |&gt; filter(月 == 12) # 12月のデータを抽出\ng &lt;- df_month_item |&gt;\n    ggplot(aes(x = 月, y = 売上個数, group = 分類, color = 分類)) +\n    geom_line() + geom_point() + # 線と点を描く\n    labs(title = \"商品と月ごとの売上個数\", x = \"月\", y = \"売上個数\") +\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    scale_fill_tableau(name = \"Tableau 20\") +\n    scale_x_discrete(breaks = 1:12, expand = expansion(mult = c(0, .20))) # x軸の範囲を拡大\ng &lt;- g + geom_text(data = df_name, aes(x = 月, y = 売上個数, label = 分類), adj = 0, size = 4, nudge_x = 0.2,family = \"HiraKakuProN-W3\")\ng",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>第3回 売上の時系列データ分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_03.html#日別の売上個数",
    "href": "POS_Marketing_03.html#日別の売上個数",
    "title": "\n3  第3回 売上の時系列データ分析\n",
    "section": "\n3.3 日別の売上個数",
    "text": "3.3 日別の売上個数\n\ndf_md_item &lt;- df |&gt;\n    group_by(分類, 月日) |&gt;\n    summarise(売上個数 = sum(個数)) |&gt;\n    ungroup()\n\n`summarise()` has grouped output by '分類'. You can override using the\n`.groups` argument.\n\ndf_md_item |&gt;\n    pivot_wider(names_from = 分類, values_from = 売上個数) |&gt;\n    head(10) |&gt;\n    gt()|&gt;\n    fmt_number(columns = 2:8, decimals = 0)\n\n\n\n\n\n月日\n競合Aおいしい濃茶\n競合Aおいしい緑茶\n競合B静岡の緑茶\n競合Cほうじ茶\n競合Dウーロン茶\n自社濃い茶\n自社緑茶\n\n\n\n10月10日\n361\n475\n206\n191\n189\n205\n351\n\n\n10月11日\n374\n613\n295\n264\n194\n352\n449\n\n\n10月12日\n253\n348\n185\n168\n125\n168\n273\n\n\n10月13日\n462\n737\n312\n283\n239\n330\n532\n\n\n10月14日\n544\n804\n392\n326\n229\n399\n570\n\n\n10月15日\n395\n647\n274\n245\n213\n279\n434\n\n\n10月16日\n196\n327\n147\n130\n111\n170\n261\n\n\n10月17日\n238\n455\n160\n185\n126\n194\n295\n\n\n10月18日\n324\n449\n225\n178\n130\n217\n347\n\n\n10月19日\n210\n341\n163\n127\n125\n165\n225\n\n\n\n\n\n\n\ndf_md_item |&gt;\n    ggplot(aes(x = 月日, y = 売上個数, group = 分類, color = 分類)) +\n    geom_line(linewidth = 0.5) +\n    geom_point(size = .5) +\n    labs(title = \"商品と日別の売上個数\",\n         x = \"日\", y = \"売上個数\") +\n    # ラベルを縦にする。\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n    scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n\ndf |&gt;\n    filter(月 == 1) |&gt;\n    filter(分類 %in% c(\"競合Aおいしい濃茶\", \"競合Aおいしい緑茶\", \"自社濃い茶\", \"自社緑茶\")) |&gt;\n    group_by(分類, 月日) |&gt;\n    summarise(売上個数 = sum(個数)) |&gt;\n    ggplot(aes(x = 月日, y = 売上個数, group = 分類, color = 分類)) +\n    geom_line(linewidth = 0.5) +\n    geom_point(size = .5) +\n    labs(title = \"商品と日別の売上個数\",\n         x = \"日\", y = \"売上個数\") +\n    # ラベルを縦にする。\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n    scale_fill_tableau(name = \"Tableau 20\")\n\n`summarise()` has grouped output by '分類'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\ndf |&gt;\n    filter(分類 %in% c(\"競合Aおいしい濃茶\", \"競合Aおいしい緑茶\", \"自社濃い茶\", \"自社緑茶\")) |&gt;\n    group_by(分類, 曜日) |&gt;\n    summarise(売上個数 = sum(個数)) |&gt;\n    ggplot(aes(x = 曜日, y = 売上個数, group = 分類, color = 分類)) +\n    geom_line(linewidth = 0.5) +\n    geom_point(size = .5) +\n    labs(title = \"商品と曜日の売上個数\",\n         x = \"曜日\", y = \"売上個数\") +\n    # ラベルを縦にする。\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    scale_fill_tableau(name = \"Tableau 20\")\n\n`summarise()` has grouped output by '分類'. You can override using the\n`.groups` argument.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>第3回 売上の時系列データ分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_03.html#移動平均",
    "href": "POS_Marketing_03.html#移動平均",
    "title": "\n3  第3回 売上の時系列データ分析\n",
    "section": "\n3.4 移動平均",
    "text": "3.4 移動平均\n\n移動平均を計算するためには、zooパッケージを使います。\n\npacman::p_load(zoo)\ndf_mv_item &lt;- df_md_item |&gt;\n    filter(分類 %in% c(\"競合Aおいしい濃茶\", \"競合Aおいしい緑茶\", \"自社濃い茶\", \"自社緑茶\")) |&gt;\n    group_by(分類) |&gt;\n    mutate(移動平均 = rollmean(売上個数, align = \"right\", k = 7, fill = NA)) |&gt;\n    ungroup()\n\nlevels(df_mv_item$月日)\n\nNULL\n\ndf_mv_item |&gt;\n    ggplot() + aes(x = 月日, y = 移動平均, group = 分類, color = 分類) +\n    geom_line(linewidth = 0.5) + geom_point(size = .5) +\n    labs(title = \"の売上個数の7日移動平均\",\n         x = \"基準日\", y = \"売上個数\") +\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) +\n    scale_fill_tableau(name = \"Tableau 20\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>第3回 売上の時系列データ分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html",
    "href": "POS_Marketing_04.html",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "",
    "text": "4.1 はじめに\nパッケージとデータを準備する。\n第3回ファイルで使うデータはchp4.xlsxです。\nパッケージを読み込みます。\npacman::p_load(tidyverse, readxl, ggthemes, gt, gtExtras, patchwork)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#はじめに",
    "href": "POS_Marketing_04.html#はじめに",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "",
    "text": "chp4.xlsx",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#天気データ",
    "href": "POS_Marketing_04.html#天気データ",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "\n4.2 天気データ",
    "text": "4.2 天気データ\n気象庁のウェブサイトからテキストの通りにデータを取得し、weather.csvとしてdataフォルダに保存してください。 このファイルをMS Excelで開くと、次のようなデータが表示されます。\n\n\n気象庁のデータ\n\nこのデータをRで分析するための前処理を行います。\n\n必要ない値が入っているので、1〜3行目を削除\n必要な変数は年月日、平均気温(℃)、最高気温(℃)、最低気温(℃)、天気概況(昼：06時～18時)、降水量の合計(mm)、1時間降水量の最大(mm)なので、それ以外の列を削除\n必要ない行を削除\n\n\nweather &lt;- read_csv(\n  \"data/weather.csv\", # データへのパス\n  locale = locale(encoding = \"cp932\"), # 文字コードの指定\n  skip = 3 # 3行目まで読み込まない\n  )\n\nNew names:\nRows: 366 Columns: 21\n── Column specification\n────────────────────────────────────────────────────────\nDelimiter: \",\" chr (16): 年月日, 平均気温(℃)...3, 平均気温(℃)...4,\n最高気温(℃)...6, 最高気温(℃)...7, 最低気温(℃)..... dbl (5):\n平均気温(℃)...2, 最高気温(℃)...5, 最低気温(℃)...8, 降水量の合計(mm)...11,\n1時間降水量の最大(...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `平均気温(℃)` -&gt; `平均気温(℃)...2`\n• `平均気温(℃)` -&gt; `平均気温(℃)...3`\n• `平均気温(℃)` -&gt; `平均気温(℃)...4`\n• `最高気温(℃)` -&gt; `最高気温(℃)...5`\n• `最高気温(℃)` -&gt; `最高気温(℃)...6`\n• `最高気温(℃)` -&gt; `最高気温(℃)...7`\n• `最低気温(℃)` -&gt; `最低気温(℃)...8`\n• `最低気温(℃)` -&gt; `最低気温(℃)...9`\n• `最低気温(℃)` -&gt; `最低気温(℃)...10`\n• `降水量の合計(mm)` -&gt; `降水量の合計(mm)...11`\n• `降水量の合計(mm)` -&gt; `降水量の合計(mm)...12`\n• `降水量の合計(mm)` -&gt; `降水量の合計(mm)...13`\n• `降水量の合計(mm)` -&gt; `降水量の合計(mm)...14`\n• `1時間降水量の最大(mm)` -&gt; `1時間降水量の最大(mm)...15`\n• `1時間降水量の最大(mm)` -&gt; `1時間降水量の最大(mm)...16`\n• `1時間降水量の最大(mm)` -&gt; `1時間降水量の最大(mm)...17`\n• `1時間降水量の最大(mm)` -&gt; `1時間降水量の最大(mm)...18`\n• `天気概況(昼：06時〜18時)` -&gt; `天気概況(昼：06時〜18時)...19`\n• `天気概況(昼：06時〜18時)` -&gt; `天気概況(昼：06時〜18時)...20`\n• `天気概況(昼：06時〜18時)` -&gt; `天気概況(昼：06時〜18時)...21`\n\nweather &lt;- weather |&gt;\n  select(c(1,2,5,8,11,15,19)) |&gt; # 必要な変数だけ抽出\n  slice(3:n())\n\nこれで必要な部分だけデータを取得できましたが，変数名が重複しているため，自動的に...2などの番号が付与されてしまっています。 これをrename()を使って変数名を修正します。\n\nweather &lt;- weather |&gt; # 3行目以降を抽出\n  mutate( # 日付の整形\n    年月日 = as.Date(年月日, format = \"%Y/%m/%d\")\n  ) |&gt;\n  rename( # 変数名を修正\n    `平均気温` = \"平均気温(℃)...2\",\n    `最高気温` = \"最高気温(℃)...5\",\n    `最低気温` = \"最低気温(℃)...8\",\n    `降水量の合計mm` = \"降水量の合計(mm)...11\",\n    `一時間降水量の最大mm` = \"1時間降水量の最大(mm)...15\",\n    `天気概況6-18h` = \"天気概況(昼：06時〜18時)...19\"\n  )",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#販売データ",
    "href": "POS_Marketing_04.html#販売データ",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "\n4.3 販売データ",
    "text": "4.3 販売データ\nテキストのデータchp4.xlsxを読み込みます。 readxl::read_excel()にオプションとしてsheet = 1を指定することで、1番目のシートを読み込みます。\n\ndf &lt;- readxl::read_excel(\"data/chp4.xlsx\", sheet = 1)\n\nNew names:\n• `` -&gt; `...1`\n\ndf &lt;- df |&gt;\n  rename( # 変数名の修正\n    年月日 = \"...1\"\n  ) |&gt;\n  mutate(\n    ## 1月2日を2023/01/02に変換\n    年月日 = paste0(\"2023/\", gsub(\"月|日\", \"/\", 年月日)),\n    年月日 = as.Date(年月日, format = \"%Y/%m/%d\")\n  )",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#データの結合",
    "href": "POS_Marketing_04.html#データの結合",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "\n4.4 データの結合",
    "text": "4.4 データの結合\n天気データと販売データを結合します。 年月日で1対1対応しているので、これをキーとして左結合するためにleft_joinを使います。\n\ndf_pos_weather &lt;- df |&gt;\n  left_join(weather, by = \"年月日\")\nglimpse(df_pos_weather)\n\nRows: 364\nColumns: 11\n$ 年月日                &lt;date&gt; 2023-01-02, 2023-01-03, 2023-01-04, 2023-01-05,…\n$ `緑茶（自社）`        &lt;dbl&gt; 109, 141, 180, 129, 245, 264, 207, 163, 269, 293…\n$ `濃い茶（自社）`      &lt;dbl&gt; 62, 86, 125, 95, 190, 154, 149, 100, 140, 197, 1…\n$ `おいしい緑茶（A社）` &lt;dbl&gt; 148, 234, 233, 162, 314, 309, 301, 186, 308, 375…\n$ `おいしい濃茶（A社）` &lt;dbl&gt; 89, 127, 152, 103, 227, 246, 219, 163, 226, 223,…\n$ 平均気温              &lt;dbl&gt; 6.2, 5.8, 5.6, 5.9, 5.3, 6.0, 7.0, 8.0, 6.3, 5.4…\n$ 最高気温              &lt;dbl&gt; 12.1, 11.0, 11.0, 10.6, 9.9, 10.4, 12.5, 13.9, 9…\n$ 最低気温              &lt;dbl&gt; 2.0, 0.5, 1.3, 2.6, 0.0, 3.0, 1.6, 2.4, 2.8, 1.5…\n$ 降水量の合計mm        &lt;dbl&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0…\n$ 一時間降水量の最大mm  &lt;dbl&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0…\n$ `天気概況6-18h`       &lt;chr&gt; \"晴\", \"快晴\", \"晴\", \"快晴\", \"薄曇時々晴\", \"晴\", …",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#気温のグラフ",
    "href": "POS_Marketing_04.html#気温のグラフ",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "\n4.5 気温のグラフ",
    "text": "4.5 気温のグラフ\n最高、最低、平均気温の折れ線グラフを描きます。\n\n\nselect()で年月日、最低気温、平均気温、最高気温の列を選択\n\npivot_longer()で最低気温、平均気温、最高気温を縦に並べたワイド型に変換\n\nggplot()でグラフを描画\n\nという処理を行います。\n\ndf_pos_weather |&gt;\n  select(年月日, 最低気温, 平均気温, 最高気温) |&gt;\n  pivot_longer(cols = c(最低気温, 平均気温, 最高気温), names_to = \"気温\", values_to = \"温度\") |&gt;\n  ggplot(aes(x = 年月日, y = 温度, group = 気温, color = 気温)) +\n  geom_line() +\n  geom_point() +\n    theme_bw(base_family = \"HiraKakuPro-W3\") +\n    scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n気温のグラフに売上個数のグラフを追加して二軸の折れ線グラフを作成します。\n\n# 売上データを例として利用\ndf_pos_weather |&gt;\n  select(年月日, 個数 = `緑茶（自社）`, 平均気温) |&gt;\n  ggplot(aes(x = 年月日)) +\n  geom_line(aes(y = 個数, color = \"売上個数\"), linewidth = 0.5) +\n  geom_line(aes(y = 平均気温 * 1500/40, color = \"平均気温\")) +\n  scale_y_continuous(\n    name = \"売上個数\",\n    limits = c(0, 1500),  # 売上個数軸の範囲を設定\n    sec.axis = sec_axis(\n      trans = ~ . / (1500/40), # 気温軸を元のスケールに戻す変換\n      name = \"平均気温 (℃)\",\n      breaks = seq(-5, 35, 5)  # 気温軸の目盛りを設定\n    )\n  ) +\n  scale_color_manual(values = c(\"売上個数\" = \"blue\", \"平均気温\" = \"black\")) +\n  labs(title = \"売上個数と気温のグラフ\", x = \"年月日\") +\n  theme_bw(base_family = \"Hiragino Sans\") +\n  theme(legend.title = element_blank())",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#降水量のグラフ",
    "href": "POS_Marketing_04.html#降水量のグラフ",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "\n4.6 降水量のグラフ",
    "text": "4.6 降水量のグラフ\n日ごとの降水量の棒グラフを作成してみます。\n\ndf_pos_weather |&gt;\n  ggplot(aes(x = 年月日, y = 降水量の合計mm)) +\n  geom_col() +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  labs(title = \"降水量の合計(mm)\", x = \"年月日\", y = \"降水量(mm)\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n微妙に分かりづらいので，月ごとに集計して棒グラフを描画します。\n\ndf_pos_weather |&gt;\n  mutate(月 = factor(month(年月日), unique(month(年月日)))) |&gt;\n  group_by(月) |&gt;\n  summarise(降水量の合計mm = sum(降水量の合計mm)) |&gt;\n  ggplot(aes(x = 月, y = 降水量の合計mm)) +  geom_col() +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  labs(title = \"月ごとの降水量の合計(mm)\", x = \"月\", y = \"降水量(mm)\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\nやはり6月は降水量が多いようです。 降水量のヒストグラムを描いてみます。\n\ndf_pos_weather |&gt;\n  ggplot(aes(x = 降水量の合計mm)) +\n  geom_histogram(binwidth = 5) +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  labs(title = \"降水量の合計(mm)\", x = \"降水量(mm)\", y = \"頻度\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\n\n\n\n\n\n\n\n降水量が非常に少ない日が圧倒的に多いこともわかります。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#変数間の関係をみる",
    "href": "POS_Marketing_04.html#変数間の関係をみる",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "\n4.7 2変数間の関係をみる",
    "text": "4.7 2変数間の関係をみる\n売上個数に影響を与える要因を探るために，気温や降水量との関係を表す散布図(scatter diagram)を描いてみます。\nまずは最高気温と売上個数の散布図を描いてみます。\n\ng_item_temp &lt;- df_pos_weather |&gt;\n  select(年月日, \"緑茶（自社）\", \"濃い茶（自社）\", \"おいしい緑茶（A社）\",\"おいしい濃茶（A社）\",\"平均気温\", \"最高気温\") |&gt;\n  pivot_longer(cols = c(\"緑茶（自社）\", \"濃い茶（自社）\", \"おいしい緑茶（A社）\",\"おいしい濃茶（A社）\"), names_to = \"商品\", values_to = \"個数\") |&gt;\n  ggplot(aes(x = 平均気温, y = 個数)) +\n  geom_point() +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  labs(title = \"最高気温と売上個数の散布図\", x = \"平均気温\", y = \"売上個数\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\ng_item_temp\n\n\n\n\n\n\n\n平均気温が上がると，売上個数も大きくなる傾向が見られます。 次に横軸に降水量をとってみます。\n\ng_item_rain &lt;- df_pos_weather |&gt;\n  select(年月日, \"緑茶（自社）\", \"濃い茶（自社）\", \"おいしい緑茶（A社）\",\"おいしい濃茶（A社）\",\"平均気温\", \"降水量の合計mm\") |&gt;\n  pivot_longer(cols = c(\"緑茶（自社）\", \"濃い茶（自社）\", \"おいしい緑茶（A社）\",\"おいしい濃茶（A社）\"), names_to = \"商品\", values_to = \"個数\") |&gt;\n  ggplot(aes(x = 降水量の合計mm, y = 個数)) +\n  geom_point() +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  labs(title = \"降水量と売上個数の散布図\", x = \"降水量\", y = \"売上個数\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")\ng_item_rain\n\n\n\n\n\n\n\n降水量がゼロとなっている日が多いため，散布図が左に張り付いていて，何かを読み取ることは難しいです。\n最高気温と緑茶の散布図を書いてみましょう。\n\ndf_pos_weather |&gt;\n  select(年月日, \"緑茶（自社）\", \"最高気温\") |&gt;\n  ggplot() + aes(x = 最高気温, y = `緑茶（自社）`) +\n  geom_point() +\n  # 個数が最大の点を強調\n  geom_point(data = df_pos_weather |&gt; filter(`緑茶（自社）` == max(`緑茶（自社）`)), color = \"red\", size = 3) +\n  labs(title = \"最高気温と緑茶の散布図\", x = \"最高気温\", y = \"緑茶（自社）\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  scale_fill_tableau(name = \"Tableau 20\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_04.html#相関係数",
    "href": "POS_Marketing_04.html#相関係数",
    "title": "\n4  第4回 売上に影響を与える要因\n",
    "section": "\n4.8 相関係数",
    "text": "4.8 相関係数\n2変数の線形関係の強さを示す相関係数(correlation coefficient)を求めます。 相関係数は-1から1の値を取り，1に近いほど正の相関が強く，-1に近いほど負の相関が強いことを表し，以下のように定義されます。\n最も良く使われる相関係数がピアソンの積率相関係数です。\n\\[\nr = \\frac{\\sum_{i=1}^{n}(x_i - \\bar{x})(y_i - \\bar{y})}{\\sqrt{\\sum_{i=1}^{n}(x_i - \\bar{x})^2}\\sqrt{\\sum_{i=1}^{n}(y_i - \\bar{y})^2}} = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y}\n\\]\n分子が2変数の共分散で，分母がそれぞれの標準偏差となっています。\n気温と売上個数，降水量と売上個数の相関係数を求めてみます。\n\ndf_pos_weather |&gt;\n  select(年月日, \"緑茶（自社）\", \"濃い茶（自社）\", \"おいしい緑茶（A社）\",\"おいしい濃茶（A社）\",\"平均気温\", \"降水量の合計mm\") |&gt;\n  pivot_longer(cols = c(\"緑茶（自社）\", \"濃い茶（自社）\", \"おいしい緑茶（A社）\",\"おいしい濃茶（A社）\"), names_to = \"商品\", values_to = \"個数\") |&gt;\n  summarise(\n    気温と個数 = cor(平均気温, 個数, use = \"complete.obs\"),\n    雨と個数 = cor(降水量の合計mm, 個数, use = \"complete.obs\")\n  ) |&gt;\n  gt() |&gt;\n  fmt_number(columns = 1:2, decimals = 3) |&gt;\n  tab_header(title = \"相関係数\") |&gt;\n  tab_options(\n    heading.title.font.size = \"normal\",\n    table.font.size = \"large\",\n    table.width = pct(60)\n    )\n\n\n\n\n\n\n相関係数\n\n\n気温と個数\n雨と個数\n\n\n\n0.566\n0.085\n\n\n\n\n\n気温と売上個数との間には\\(0.566\\)と強い正の相関がありますが，降水量と売上個数との間には\\(0.085\\)とほぼ無相関に近い値が得られました。 これを図に書き込んだものが以下のようになります。\n\ng1 &lt;- g_item_temp + geom_smooth(method = \"lm\", se = FALSE)\ng2 &lt;- g_item_rain + geom_smooth(method = \"lm\", se = FALSE)\ng1 + g2\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>第4回 売上に影響を与える要因</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_05.html",
    "href": "POS_Marketing_05.html",
    "title": "\n5  第5回 併売の分析\n",
    "section": "",
    "text": "5.1 はじめに\nパッケージとデータを準備する。\n第3回ファイルで使うデータはchp5.xlsxです。\nパッケージを読み込みます。\npacman::p_load(tidyverse, readxl, arules, ggthemes, knitr, kableExtra, gt, gtExtras, patchwork)\nここで用いるchp5.xlsxのシート名を確認します。\nreadxl::excel_sheets(\"data/chp5.xlsx\")\n\n[1] \"いつものPOSデータ\" \"ピボットテーブル\"  \"図5-2・表5-1\"     \n[4] \"図5-3\"             \"表5-2\"             \"表5-3・表5-4\"     \n[7] \"併売データ\"        \"表5-6・表5-7\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>第5回 併売の分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_05.html#はじめに",
    "href": "POS_Marketing_05.html#はじめに",
    "title": "\n5  第5回 併売の分析\n",
    "section": "",
    "text": "chp5.xlsx",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>第5回 併売の分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_05.html#併売の基礎集計",
    "href": "POS_Marketing_05.html#併売の基礎集計",
    "title": "\n5  第5回 併売の分析\n",
    "section": "\n5.2 併売の基礎集計",
    "text": "5.2 併売の基礎集計\n最初の分析では、併売の基礎集計を行うために、1番目のシート「いつものPOSデータ」を読み込みます。\n\ndf &lt;- readxl::read_excel(\"data/chp5.xlsx\", sheet = 1)\nhead(df)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n日付\n曜日\n時間\n性別\n年代\nメーカー\n商品名\n単価\n個数\n金額\n\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合A\nおいしい緑茶\n160\n2\n320\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合B\n静岡の緑茶\n170\n2\n340\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合A\nおいしい濃茶\n160\n2\n320\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合B\n静岡の緑茶\n170\n4\n680\n\n\nR000003\n2023-01-02\n月\n10\n男性\n50代\n競合C\nほうじ茶\n140\n1\n140\n\n\nR000004\n2023-01-02\n月\n10\n女性\n50代\n競合D\nウーロン茶\n140\n3\n420\n\n\n\n\n\n\nまず，各商品が購入された回数を示すように，個数が1以上のとき1を，そうでないときに0を返すダミー変数を作成し，回数という変数とします。\n\ndf_wide &lt;- df |&gt;\n  select(レシート番号, 商品名, 個数) |&gt; # 必要な列だけ抽出\n  mutate(回数 = if_else(個数 &gt; 0, 1, 0)) |&gt; # 個数が1以上の場合は1、それ以外は0\n  select(レシート番号, 商品名, 回数) |&gt;\n  pivot_wider(names_from = 商品名, values_from = 回数, values_fill = 0)\nhead(df_wide)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\nおいしい緑茶\n静岡の緑茶\nおいしい濃茶\nほうじ茶\nウーロン茶\n濃い茶\n緑茶\n\n\n\nR000001\n1\n1\n0\n0\n0\n0\n0\n\n\nR000002\n0\n1\n1\n0\n0\n0\n0\n\n\nR000003\n0\n0\n0\n1\n0\n0\n0\n\n\nR000004\n0\n0\n0\n0\n1\n0\n0\n\n\nR000005\n1\n0\n0\n0\n0\n1\n1\n\n\nR000006\n0\n0\n1\n0\n0\n0\n0\n\n\n\n\n\n\n\ndf |&gt;\n  select(レシート番号, 商品名, 個数) |&gt; # 必要な列だけ抽出\n  mutate(回数 = if_else(個数 &gt; 0, 1, 0)) |&gt; # 個数が1以上の場合は1、それ以外は0\n  group_by(商品名) |&gt; # 商品ごとにグループ化\n  summarise(購入回数 = sum(回数)) |&gt; # 購入回数を合計\n  arrange(desc(購入回数)) |&gt;  # 購入回数で降順ソート\n  gt() |&gt; # 作表\n  fmt_number(columns = 2, decimals = 0) |&gt;\n  tab_options(\n    heading.title.font.size = \"normal\",\n    table.font.size = \"small\"\n  ) |&gt;\n  gt_theme_pff()\n\n\n\n\n\n商品名\n購入回数\n\n\n\nおいしい緑茶\n84,832\n\n\n緑茶\n65,755\n\n\nおいしい濃茶\n59,910\n\n\n静岡の緑茶\n46,516\n\n\n濃い茶\n45,982\n\n\nほうじ茶\n39,190\n\n\nウーロン茶\n31,905\n\n\n\n\n\n\nこれで、テキストの図5-1と同様に、レシート番号ごとに商品名が列になり、購入された場合に1、購入されなかった場合に0が入ったデータフレームができました。 図5−2と同じになるように、自社商品、競合A社〜D社という製品の並びに変更します。\n\ndf_wide &lt;- df_wide |&gt;\n  select(レシート番号, 緑茶, 濃い茶, おいしい緑茶, おいしい濃茶, 静岡の緑茶, ほうじ茶, ウーロン茶)\ndf_wide |&gt; tail(4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n緑茶\n濃い茶\nおいしい緑茶\nおいしい濃茶\n静岡の緑茶\nほうじ茶\nウーロン茶\n\n\n\nR225613\n0\n1\n0\n0\n0\n0\n0\n\n\nR225614\n1\n0\n0\n1\n0\n0\n0\n\n\nR225615\n1\n0\n0\n1\n1\n0\n0\n\n\nR225616\n0\n0\n0\n0\n1\n0\n0\n\n\n\n\n\n\nここから、各商品が別の各商品と一緒に購入された回数を集計します。 まずは自社製品の緑茶だけを取り出して、図5-3を再現してみます。\n\ndf_wide |&gt;\n  filter(緑茶 == 1) |&gt; # 緑茶が購入された場合\n  head(5) # 先頭5行を表示\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n緑茶\n濃い茶\nおいしい緑茶\nおいしい濃茶\n静岡の緑茶\nほうじ茶\nウーロン茶\n\n\n\nR000005\n1\n1\n1\n0\n0\n0\n0\n\n\nR000010\n1\n1\n0\n0\n0\n1\n0\n\n\nR000011\n1\n0\n1\n0\n1\n0\n1\n\n\nR000012\n1\n0\n1\n1\n0\n0\n1\n\n\nR000016\n1\n0\n1\n0\n0\n0\n0\n\n\n\n\n\n\n変数ごとの合計を求めることで、この緑茶と一緒に購入された回数を商品別に集計します。\n\ndf_wide |&gt;\n  filter(緑茶 == 1) |&gt; # 緑茶が購入された場合\n  select(-緑茶) |&gt;\n  summarise(across(濃い茶:ウーロン茶, sum)) |&gt; # 商品ごとに合計\n  gt() |&gt; # 作表\n  fmt_number(columns = 1:6, decimals = 0) |&gt;\n  tab_options(\n    table.font.size = \"small\"\n  ) |&gt;\n  tab_header(title = \"緑茶と一緒に購入された商品の個数\") |&gt;\n  gt_theme_pff()\n\n\n\n\n\n\n緑茶と一緒に購入された商品の個数\n\n\n濃い茶\nおいしい緑茶\nおいしい濃茶\n静岡の緑茶\nほうじ茶\nウーロン茶\n\n\n\n11,426\n15,441\n10,835\n9,737\n8,149\n6,668\n\n\n\n\n\nこれを関数にして、他の商品にも適用し、一緒に購入された回数を集計します。\n\n# 全商品名を取得\nproduct_names &lt;- colnames(df_wide)[-1] # レシート番号以外の列\n# 各商品の販売回数合計を計算\ntotal_counts &lt;- colSums(df_wide[product_names])\n# 各商品の購入頻度表を作成\nresult &lt;- product_names |&gt;\n  map_dfr(~ { # purrr::map_dfr()を使ってデータフレームを結合\n    df_wide |&gt;\n      filter(!!sym(.x) == 1) |&gt; # !!sym()で変数名を展開\n      select(-レシート番号) |&gt;\n      summarise(\n        across(everything(), sum)\n        ) |&gt; # 商品ごとに合計\n      mutate(\n        across(everything(), ~ ifelse(cur_column() == .x, total_counts[.x], .)),\n             商品 = .x)\n  }) |&gt;\n  select(商品, everything())\n# ここから下は表の設定なので、なくても動作します\nresult |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:8, decimals = 0) |&gt;\n  tab_options(\n    table.font.size = \"normal\",\n    heading.title.font.size = \"normal\",\n    ) |&gt;\n  gt_color_rows(2:8, palette = \"ggsci::blue_material\") |&gt;\n  tab_header(title = \"一緒に販売された商品の個数\") |&gt;\n  gt_theme_pff()\n\n\n\n\n\n\n一緒に販売された商品の個数\n\n\n商品\n緑茶\n濃い茶\nおいしい緑茶\nおいしい濃茶\n静岡の緑茶\nほうじ茶\nウーロン茶\n\n\n\n\n緑茶\n65,755\n11,426\n15,441\n10,835\n9,737\n8,149\n6,668\n\n\n濃い茶\n11,426\n45,982\n10,761\n7,476\n6,795\n5,677\n4,577\n\n\nおいしい緑茶\n15,441\n10,761\n84,832\n17,948\n12,663\n10,724\n8,618\n\n\nおいしい濃茶\n10,835\n7,476\n17,948\n59,910\n8,760\n7,398\n5,963\n\n\n静岡の緑茶\n9,737\n6,795\n12,663\n8,760\n46,516\n5,691\n4,622\n\n\nほうじ茶\n8,149\n5,677\n10,724\n7,398\n5,691\n39,190\n3,862\n\n\nウーロン茶\n6,668\n4,577\n8,618\n5,963\n4,622\n3,862\n31,905\n\n\n\n\n\n\n各項目の値を合計値で割ることで、商品ごとの購入率を求めます。\n\nresult_ratio &lt;- result |&gt;\n  mutate(\n    緑茶 = 緑茶 / 緑茶[1],\n    濃い茶 = 濃い茶 / 濃い茶[2],\n    おいしい緑茶 = おいしい緑茶 / おいしい緑茶[3],\n    おいしい濃茶 = おいしい濃茶 / おいしい濃茶[4],\n    静岡の緑茶 = 静岡の緑茶 / 静岡の緑茶[5],\n    ほうじ茶 = ほうじ茶 / ほうじ茶[6],\n    ウーロン茶 = ウーロン茶 / ウーロン茶[7]\n  )\n  # ここから下は表の設定\nresult_ratio |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:8, decimals = 3) |&gt;\n  tab_options(table.font.size = \"small\") |&gt;\n  gt_color_rows(2:8, palette = \"ggsci::blue_material\") |&gt;\n  tab_header(title = \"一緒に販売された商品の割合(個数/縦合計)\") |&gt;\n  gt_theme_pff()\n\nWarning: Domain not specified, defaulting to observed range within each\nspecified column.\n\n\n\n\n\n\n\n一緒に販売された商品の割合(個数/縦合計)\n\n\n商品\n緑茶\n濃い茶\nおいしい緑茶\nおいしい濃茶\n静岡の緑茶\nほうじ茶\nウーロン茶\n\n\n\n\n緑茶\n1.000\n0.248\n0.182\n0.181\n0.209\n0.208\n0.209\n\n\n濃い茶\n0.174\n1.000\n0.127\n0.125\n0.146\n0.145\n0.143\n\n\nおいしい緑茶\n0.235\n0.234\n1.000\n0.300\n0.272\n0.274\n0.270\n\n\nおいしい濃茶\n0.165\n0.163\n0.212\n1.000\n0.188\n0.189\n0.187\n\n\n静岡の緑茶\n0.148\n0.148\n0.149\n0.146\n1.000\n0.145\n0.145\n\n\nほうじ茶\n0.124\n0.123\n0.126\n0.123\n0.122\n1.000\n0.121\n\n\nウーロン茶\n0.101\n0.100\n0.102\n0.100\n0.099\n0.099\n1.000\n\n\n\n\n\n\n次に、ある商品が購入された場合に、他の商品も購入されるかどうかを調べます。\n\ndf_oishi_ryo &lt;- df_wide |&gt;\n  dplyr::filter(おいしい緑茶 == 1)\ndf_oishi_ryo |&gt; head(5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n緑茶\n濃い茶\nおいしい緑茶\nおいしい濃茶\n静岡の緑茶\nほうじ茶\nウーロン茶\n\n\n\nR000001\n0\n0\n1\n0\n1\n0\n0\n\n\nR000005\n1\n1\n1\n0\n0\n0\n0\n\n\nR000011\n1\n0\n1\n0\n1\n0\n1\n\n\nR000012\n1\n0\n1\n1\n0\n0\n1\n\n\nR000014\n0\n1\n1\n0\n0\n0\n1",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>第5回 併売の分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_05.html#アソシエーション分析",
    "href": "POS_Marketing_05.html#アソシエーション分析",
    "title": "\n5  第5回 併売の分析\n",
    "section": "\n5.3 アソシエーション分析",
    "text": "5.3 アソシエーション分析\nアソシエーション分析とはマーケティングで用いられる分析手法の1つで、POSデータや購買データから、商品の関連性やパターンを見つける分析手法です。 この手法を理解するためには，確率の知識が必要となるので，先に条件付確率の考え方を学びます。\n\n5.3.1 条件付確率\n事象 \\(A\\) が生起する確率を \\(\\Pr (A)\\) ，事象 \\(B\\) が生起する確率を \\(\\Pr (B)\\) とします。 事象 \\(A\\) と事象 \\(B\\) が同時に生起する確率を \\(\\Pr (A \\cap B)\\) で表し，これを同時確率といいます。 また、事象 \\(B\\) が生起したときの事象 \\(A\\) の生起確率を \\(\\Pr (A \\mid B)\\) と表します。これを条件付確率といい、次の式で表されます。\n\\[\n\\Pr(A \\mid B) = \\frac{\\Pr(A \\cap B)}{\\Pr(B)}\n\\]\n図にすると次のようになります。\n\n\n条件付確率\n\nこの式は次のように変形できます。 \\[\n\\Pr(A \\cap B) = \\Pr(B) \\times \\Pr(A \\mid B)\n\\]\nが成り立ちます。 これは事象 \\(B\\)　が起こったときに事象 \\(A\\) が起こる確率 \\(\\Pr(A \\mid B)\\) に、事象 \\(B\\) が起こる確率 \\(\\Pr(B)\\) を掛けることで、「事象 \\(B\\) が起こり、さらに事象 \\(A\\) が起こる確率」 \\(\\Pr(A \\cap B)\\) を求めることができるということです。 ここで \\(\\Pr(A)\\) と \\(\\Pr(B)\\) が独立である場合，\\(\\Pr(A \\mid B) = \\Pr(A)\\) が成り立つため，\\(\\Pr(A \\cap B) = \\Pr(A) \\times \\Pr(B)\\) となります。 \\(\\Pr(A)\\) と \\(\\Pr(B)\\) が独立でない場合，\\(\\Pr(A \\mid B) \\not = \\Pr(A)\\) となり，\\(\\Pr(A \\cap B) \\not = \\Pr(A) \\times \\Pr(B)\\) となります。\nまた \\(\\Pr(A) &gt;0\\) のときには、\\(\\Pr(A \\cap B) = \\Pr(A) \\times \\Pr(B \\mid A)\\) が成り立ちます。\n\n5.3.2 アソシエーション分析の考え方\n次に，商品の購買データを使ったアソシエーション分析について説明します。 いま，商品 \\(A\\) と商品 \\(B\\) がお店で販売されているとします。 ある商品 \\(A\\) が売れる確率を \\(\\Pr (A)\\) で表し、商品 \\(B\\) が売れる確率を \\(\\Pr (B)\\) で表します。\n\\(\\Pr (B) \\not = 0\\) のとき、\\(B\\) が売れたときの商品 \\(A\\) の売れる確率を条件付確率 \\(\\Pr (A \\mid B)\\) で表します。 ここで，\\(\\Pr (A \\cap B)\\) は商品 \\(A\\) と商品 \\(B\\) が同時に売れる確率を表し，\\(\\Pr (B)\\) は条件なしで商品 \\(B\\) が売れる確率を表します。 つまり，条件付確率とは，無条件で商品 \\(B\\) が売れた場合に，商品 \\(A\\) が同時に売れる確率を求めるものです。\n\n\nここでは \\(\\Pr (A)\\) は確率というよりも，特定の商品の販売個数を全商品の販売個数で割った割合で，頻度を示しています。 条件付確率 \\(\\Pr (A \\mid B)\\) ある特定の商品が売れた場合に限定して，その他の商品が売れる確率を求めるものです。\n商品 \\(B\\) を買った人が同時に商品 \\(A\\) も買う条件付確率 \\(\\Pr(A \\mid B)\\) が、条件なしで商品 \\(A\\) を買う確率 \\(\\Pr (A)\\) よりも高いなら，\n\\[\n\\frac{\\Pr (A \\mid B)}{\\Pr (A)} &gt; 1\n\\]\nとなります。 条件付確率の定義を使うと、この式の左辺は次のように変形できます。 \\[\n\\begin{aligned}\n\\frac{\\Pr (A \\mid B)}{\\Pr (A)} &= \\Pr(A \\mid B) \\times \\frac{1}{\\Pr (A)} \\\\\n&= \\frac{\\Pr (A \\cap B)}{\\Pr (B)} \\times \\frac{1}{\\Pr (A)} \\\\\n&= \\underbrace{\\frac{\\Pr (A \\cap B)}{\\Pr (B) \\Pr (A)}}_{\\text{リフト値}} \\gtreqqless 1\n\\end{aligned}\n\\]\nこれをリフト値(Lift)といい，つぎように解釈します。\n\nリフト値が1を超えているとき、商品 \\(A\\) を買う確率よりも商品 \\(B\\) を買った場合に商品 \\(A\\) も買う確率のほうが高い。\nリフト値が1のときは，商品 \\(A\\) の購買確率と商品 \\(B\\) の購買確率が独立である，つまり無関係であることを意味します。\nリフト値が1未満のときは，商品 \\(B\\) が売れたとき，商品 \\(A\\) が通常より売れない，つまり負の相関があることを意味します。\n\n図にすると次のようになります。\n\n\nリフト値の図示\n\n要するに，リフト値は商品 \\(B\\) が売れたとき商品 \\(A\\) が発生する確率が、単に商品 \\(B\\) とは無関係に \\(A\\) が販売される確率と比較してどれだけ高いかを示します。 このようにリフト値から二つの事象が同時に起こる可能性の高さを分析する方法をアソシエーション分析(Association Analysis)といいます。\n\n5.3.3 支持度と確信度\nまた、このリフト値の分子 \\(\\Pr(A \\cap B)\\) は商品 \\(A\\) と商品 \\(B\\) が同時に売れる確率であり、これをアソシエーション分析ではAとBの支持度(support)と呼びます。 図にすると，次のようになります。\n\n\n支持度\n\n要するに，全ての購買のうち，AとBが同時に売れたケースの出現頻度を測る指標です。\nまた、\\(B\\) を買った人のうち \\(A\\) も買った人の割合を表す条件付確率 \\(\\Pr(A \\mid B)\\) を確信度(\\(B \\rightarrow A\\))(confidence)と呼びます。\n\n\n信頼度ということもあります。\n\n\n確信度\n\n\\(B\\) が売れた場合に，\\(A\\) も売れるという状況がどれだけ確実に予測できるかを示します。 条件付確率 \\(\\Pr (A \\mid B)\\) が高いということは，\\(B\\) が売れたときは \\(A\\) も高い確率で売れる，ということを意味します。",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>第5回 併売の分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_05.html#rでアソシエーション分析",
    "href": "POS_Marketing_05.html#rでアソシエーション分析",
    "title": "\n5  第5回 併売の分析\n",
    "section": "\n5.4 Rでアソシエーション分析",
    "text": "5.4 Rでアソシエーション分析\nアソシエーション分析のために用いるデータとして7番目のシート「併売データ」を読み込みたいので，sheet = 7を指定します。\n\ndf_associ &lt;- readxl::read_excel(\"data/chp5.xlsx\", sheet = 7)\nhead(df_associ)\n\n\n\n\nお茶\n炭酸飲料\n弁当類\nパン類\nお菓子\nアイス\n\n\n\n1\n1\n0\n0\n0\n0\n\n\n1\n0\n0\n0\n1\n0\n\n\n0\n1\n0\n0\n0\n0\n\n\n1\n1\n0\n0\n0\n0\n\n\n0\n1\n0\n0\n1\n1\n\n\n0\n0\n0\n1\n0\n1\n\n\n\n\n\n\n列は商品名で、各セルには購入された場合に1、購入されなかった場合に0が入っている観測値1000のデータフレームが読み込まれました。\n\n5.4.1 arulesパッケージ\nRでアソシエーション分析を行うために，arulesパッケージを使います。 CRANのページにあるマニュアルにMining Association Rules and Frequent Itemsetsとあるように、関連ルールと頻出アイテムセットを見つけるためのパッケージです。\n\n\n具体的な理論とアルゴリズムは，CRANのVignettes:introduction to arulesを参照してください。\nここで用いるarulesパッケージのapriori()関数は、関連ルールに関する制限を識別し、Klemettinen (1994)のアプリオリアルゴリズムを実装しています。\nアソシエーション分析を行うために、まずはデータをtransactionsオブジェクトに変換します。 arules::as()関数を使って変換します。この関数は引数としてlistやmatrixを受け取り、transactionsオブジェクトに変換します。\n順番に処理していきます。 df_associはread_excel()関数で読み込んだため、data.frame型となっています。 これをas.matrix()で行列型に変換し、その後as()関数でtransactionsオブジェクトに変換し、df_tranに代入します。\n\ndf_tran &lt;- df_associ |&gt;\n  as.matrix() |&gt; # 行列型に変換\n  as(\"transactions\") # transactionsオブジェクトに変換\n\n次に、apriori()関数を使ってアソシエーション分析を行います。 この関数は、transactionsオブジェクトを引数として受け取り、parameter引数でサポートと信頼度を指定します。 ここでは、サポートを0.05、信頼度を0.4とし、結果をdf_apに代入します。\n\ndf_ap &lt;- arules::apriori(\n  df_tran,\n  parameter = list(\n    support = 0.05, # サポート 0.05\n    confidence = 0.4 # 信頼度 0.4\n    ) \n  )\n\ndf_apには、アソシエーション分析の結果が格納されているので、sort()関数を使ってliftでソートし、inspect()関数で結果を表示します。\n\nresult &lt;- df_ap |&gt;\n  sort(by = \"lift\") |&gt; # liftでソート\n  inspect()  # 結果を表示\n\n     lhs                   rhs        support confidence coverage lift     \n[1]  {炭酸飲料, 弁当類} =&gt; {お茶}     0.138   0.8214286  0.168    1.2834821\n[2]  {炭酸飲料, アイス} =&gt; {お茶}     0.058   0.7435897  0.078    1.1618590\n[3]  {お茶, アイス}     =&gt; {炭酸飲料} 0.058   0.5800000  0.100    1.1284047\n[4]  {お茶, お菓子}     =&gt; {炭酸飲料} 0.056   0.5773196  0.097    1.1231899\n[5]  {弁当類}           =&gt; {お茶}     0.283   0.7128463  0.397    1.1138224\n[6]  {お茶}             =&gt; {弁当類}   0.283   0.4421875  0.640    1.1138224\n[7]  {炭酸飲料}         =&gt; {お茶}     0.358   0.6964981  0.514    1.0882782\n[8]  {お茶}             =&gt; {炭酸飲料} 0.358   0.5593750  0.640    1.0882782\n[9]  {}                 =&gt; {炭酸飲料} 0.514   0.5140000  1.000    1.0000000\n[10] {}                 =&gt; {お茶}     0.640   0.6400000  1.000    1.0000000\n[11] {炭酸飲料, お菓子} =&gt; {お茶}     0.056   0.6292135  0.089    0.9831461\n[12] {お茶, 弁当類}     =&gt; {炭酸飲料} 0.138   0.4876325  0.283    0.9487014\n[13] {お茶, パン類}     =&gt; {炭酸飲料} 0.052   0.4814815  0.108    0.9367344\n[14] {炭酸飲料, パン類} =&gt; {お茶}     0.052   0.5909091  0.088    0.9232955\n[15] {お菓子}           =&gt; {炭酸飲料} 0.089   0.4708995  0.189    0.9161468\n[16] {アイス}           =&gt; {お茶}     0.100   0.5813953  0.172    0.9084302\n[17] {アイス}           =&gt; {炭酸飲料} 0.078   0.4534884  0.172    0.8822731\n[18] {弁当類}           =&gt; {炭酸飲料} 0.168   0.4231738  0.397    0.8232953\n[19] {お菓子}           =&gt; {お茶}     0.097   0.5132275  0.189    0.8019180\n[20] {パン類}           =&gt; {お茶}     0.108   0.4886878  0.221    0.7635747\n     count\n[1]  138  \n[2]   58  \n[3]   58  \n[4]   56  \n[5]  283  \n[6]  283  \n[7]  358  \n[8]  358  \n[9]  514  \n[10] 640  \n[11]  56  \n[12] 138  \n[13]  52  \n[14]  52  \n[15]  89  \n[16] 100  \n[17]  78  \n[18] 168  \n[19]  97  \n[20] 108  \n\n\n結果が見づらいので、arules::apriori()関数の結果をdata.frame型に変換し、変数名を補い、gt()関数で表形式にします。\n\nresult &lt;- result |&gt; \n  as.data.frame() # data.frame型に変換\nnames(result)[2] &lt;- \"arrow\" # 変数名を補う\n\nresult |&gt; \n  gt() |&gt; # 表形式にする\n  fmt_number(columns = 4:7, decimals = 2) |&gt;\n  tab_options(\n    table.font.size = \"small\"\n  )\n\n\n\n\n\nlhs\narrow\nrhs\nsupport\nconfidence\ncoverage\nlift\ncount\n\n\n\n{炭酸飲料, 弁当類}\n=&gt;\n{お茶}\n0.14\n0.82\n0.17\n1.28\n138\n\n\n{炭酸飲料, アイス}\n=&gt;\n{お茶}\n0.06\n0.74\n0.08\n1.16\n58\n\n\n{お茶, アイス}\n=&gt;\n{炭酸飲料}\n0.06\n0.58\n0.10\n1.13\n58\n\n\n{お茶, お菓子}\n=&gt;\n{炭酸飲料}\n0.06\n0.58\n0.10\n1.12\n56\n\n\n{弁当類}\n=&gt;\n{お茶}\n0.28\n0.71\n0.40\n1.11\n283\n\n\n{お茶}\n=&gt;\n{弁当類}\n0.28\n0.44\n0.64\n1.11\n283\n\n\n{炭酸飲料}\n=&gt;\n{お茶}\n0.36\n0.70\n0.51\n1.09\n358\n\n\n{お茶}\n=&gt;\n{炭酸飲料}\n0.36\n0.56\n0.64\n1.09\n358\n\n\n{}\n=&gt;\n{炭酸飲料}\n0.51\n0.51\n1.00\n1.00\n514\n\n\n{}\n=&gt;\n{お茶}\n0.64\n0.64\n1.00\n1.00\n640\n\n\n{炭酸飲料, お菓子}\n=&gt;\n{お茶}\n0.06\n0.63\n0.09\n0.98\n56\n\n\n{お茶, 弁当類}\n=&gt;\n{炭酸飲料}\n0.14\n0.49\n0.28\n0.95\n138\n\n\n{お茶, パン類}\n=&gt;\n{炭酸飲料}\n0.05\n0.48\n0.11\n0.94\n52\n\n\n{炭酸飲料, パン類}\n=&gt;\n{お茶}\n0.05\n0.59\n0.09\n0.92\n52\n\n\n{お菓子}\n=&gt;\n{炭酸飲料}\n0.09\n0.47\n0.19\n0.92\n89\n\n\n{アイス}\n=&gt;\n{お茶}\n0.10\n0.58\n0.17\n0.91\n100\n\n\n{アイス}\n=&gt;\n{炭酸飲料}\n0.08\n0.45\n0.17\n0.88\n78\n\n\n{弁当類}\n=&gt;\n{炭酸飲料}\n0.17\n0.42\n0.40\n0.82\n168\n\n\n{お菓子}\n=&gt;\n{お茶}\n0.10\n0.51\n0.19\n0.80\n97\n\n\n{パン類}\n=&gt;\n{お茶}\n0.11\n0.49\n0.22\n0.76\n108\n\n\n\n\n\n\n\n5.4.2 併売データの基礎集計\n次に併売データの基礎集計を行います。 商品ごとの購買回数を集計します。\n\ndf_associ |&gt;\n  colSums() |&gt; # 列ごとに合計\n  t() |&gt; # 行と列を入れ替え\n  kable() # 表形式にする\n\n\n\nお茶\n炭酸飲料\n弁当類\nパン類\nお菓子\nアイス\n\n\n640\n514\n397\n221\n189\n172\n\n\n\n\n1度に何種類の商品を購入するかを集計します。\n\ndf_associ |&gt;\n  rowSums() |&gt; # 行ごとに合計\n  table() |&gt; t() |&gt; kable()\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n293\n375\n251\n71\n7\n3\n\n\n\n\n同時に2種類の商品を購入するケースが最も多いようです。 どの商品との組み合わせが多いのかを、商品の組ごとの購買回数を調べます。\n\nprod_name &lt;- colnames(df_associ)\nprod_pair &lt;- combn(prod_name, 2, simplify = FALSE)\nprod_counts &lt;- sapply(prod_pair, function(pair) {\n  sum(df_associ[[pair[1]]] & df_associ[[pair[2]]])\n  })\n\nresult &lt;- data.frame(\n  商品ペア = sapply(prod_pair, paste, collapse = \" & \"),\n  購入回数 = prod_counts\n  ) |&gt;\n  arrange(desc(購入回数))\nresult\n\n\n\n\n商品ペア\n購入回数\n\n\n\nお茶 & 炭酸飲料\n358\n\n\nお茶 & 弁当類\n283\n\n\n炭酸飲料 & 弁当類\n168\n\n\nお茶 & パン類\n108\n\n\nお茶 & アイス\n100\n\n\nお茶 & お菓子\n97\n\n\n炭酸飲料 & お菓子\n89\n\n\n炭酸飲料 & パン類\n88\n\n\n炭酸飲料 & アイス\n78\n\n\n弁当類 & パン類\n73\n\n\n弁当類 & お菓子\n67\n\n\n弁当類 & アイス\n57\n\n\nパン類 & お菓子\n43\n\n\nパン類 & アイス\n32\n\n\nお菓子 & アイス\n28",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>第5回 併売の分析</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_06.html#準備",
    "href": "POS_Marketing_06.html#準備",
    "title": "\n6  第6回 売れる商品を入荷しよう\n",
    "section": "",
    "text": "対象週 : 文字列\n対象店舗数 : 数値\n来店客数 : 数値\n商品名 : 文字列\n出現店舗数 : 数値\n出現店来店客数 : 数値\n売上金額 : 数値\n売上個数 : 数値\n平均価格 : 数値\n\n\n\n\nそれぞれの詳細はテキストp.183を参照してください。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>第6回 売れる商品を入荷しよう</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_06.html#出店カバー率",
    "href": "POS_Marketing_06.html#出店カバー率",
    "title": "\n6  第6回 売れる商品を入荷しよう\n",
    "section": "\n6.2 出店カバー率",
    "text": "6.2 出店カバー率\nある商品売れた店舗の数を全店舗数で除したものを出店カバー率と定義します。\n\\[\n\\text{出店カバー率} = \\frac{\\text{出現店舗数}}{\\text{対象店舗数}} \\times 100\n\\]\n出店カバー率を計算して、dfに追加します。\n\ndf &lt;- df |&gt;\n  mutate(\n    出店カバー率 = 出現店舗数 / 対象店舗数 * 100\n    )\n\nこれを週ごとと商品ごとに集計してみます。\n\ndf_cover &lt;- df |&gt;\n  group_by(対象週, 商品名) |&gt;\n  summarise(\n    平均出店カバー率 = mean(出店カバー率)\n    ) |&gt;\n  ungroup()\n\n週と商品名ごとに出店カバー率の平均値を計算したので、商品名を列にして、列の順番を変えて、表として出力します。 セルの値ごとに色を濃くすることで、店頭カバー率の推移が分かりやすくしています。\n\ndf_cover |&gt;\n  pivot_wider(names_from = 商品名, values_from = 平均出店カバー率) |&gt; # ワイド型に\n  select(対象週, クリスマス限定, こだわり味, しびれ味, ピリ辛味, 激辛味, 定番味) |&gt; # 列の順番を変更\n  gt() |&gt; # 表を作成\n  fmt_number(columns = 2:7, decimals = 2) |&gt; # 2〜7列を小数点2桁に\n  fmt_missing(columns = 2:7, missing_text = \"\") |&gt;\n  gt_color_rows(2:7, domain = c(19, 100), palette = \"ggsci::blue_material\") |&gt;\n  tab_header(title = \"表6-2 6種の菓子の店頭カバー率の推移\") |&gt; # タイトルをつける\n  gt_theme_pff() # テーマを適用\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n表6-2 6種の菓子の店頭カバー率の推移\n\n\n対象週\nクリスマス限定\nこだわり味\nしびれ味\nピリ辛味\n激辛味\n定番味\n\n\n\n\n2023/10/30週\n65.69\n75.49\n\n49.02\n19.61\n78.43\n\n\n2023/11/06週\n65.69\n75.49\n\n49.02\n20.59\n79.41\n\n\n2023/11/13週\n68.63\n75.49\n\n50.00\n19.61\n79.41\n\n\n2023/11/20週\n60.78\n73.53\n\n50.00\n21.57\n79.41\n\n\n2023/11/27週\n60.78\n75.49\n\n49.02\n33.33\n79.41\n\n\n2023/12/04週\n77.45\n75.49\n19.61\n50.00\n45.10\n78.43\n\n\n2023/12/11週\n77.45\n73.53\n21.57\n50.00\n50.98\n78.43\n\n\n2023/12/18週\n76.47\n75.49\n22.55\n50.00\n58.82\n78.43\n\n\n2023/12/25週\n59.80\n76.47\n29.41\n49.02\n62.75\n78.43\n\n\n2024/01/01週\n44.66\n73.79\n32.04\n49.51\n63.11\n77.67\n\n\n2024/01/08週\n44.66\n75.73\n33.01\n49.51\n65.05\n77.67\n\n\n2024/01/15週\n45.63\n75.73\n36.89\n49.51\n69.90\n78.64\n\n\n2024/01/22週\n46.60\n73.79\n40.78\n48.54\n69.90\n78.64\n\n\n2024/01/29週\n48.54\n75.73\n43.69\n48.54\n69.90\n78.64\n\n\n\n\n\n\n「クリスマス限定」はクリスマスを境に店頭カバー率が激減し、「しびれ味」と「激辛味」は増加傾向で、他の商品は安定しているようです。\nつぎに、横軸を週、縦軸を出店カバー率の平均値としたグラフにしてみます。 ggplot()関数で、group = 商品名とすることで、商品ごとの折れ線グラフを作ります。\n\ndf_cover |&gt;\n  ggplot() + aes(x = 対象週, y = 平均出店カバー率, color = 商品名, group = 商品名) +\n  geom_line() + geom_point() + # 線と点を描く\n  theme_calc(base_family = \"HiraKakuPro-W3\") + # テーマを適用\n  # X軸のラベルを45度回転\n  labs(title = \"図6-5 6種の菓子の店頭カバー率の推移のグラフ\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_fill_tableau(name = \"Tableau 20\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>第6回 売れる商品を入荷しよう</span>"
    ]
  }
]