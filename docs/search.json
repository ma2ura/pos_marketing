[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "POSとマーケティングデータ分析",
    "section": "",
    "text": "POSデータで学ぶはじめてのマーケティングデータ分析",
    "crumbs": [
      "POSデータで学ぶはじめてのマーケティングデータ分析"
    ]
  },
  {
    "objectID": "index.html#資料の紹介",
    "href": "index.html#資料の紹介",
    "title": "POSとマーケティングデータ分析",
    "section": "資料の紹介",
    "text": "資料の紹介\nこの資料は，横山・花井著 (2024) 「POSデータで学ぶはじめてのマーケティングデータ分析」の内容をRで再現することを目的として作成されています。 そのため書籍の内容にはほとんど触れず，書籍内の分析や作表・作図をRで再現することに焦点を当てています。\n\n\n\nPOSデータとマーケティングデータ分析",
    "crumbs": [
      "POSデータで学ぶはじめてのマーケティングデータ分析"
    ]
  },
  {
    "objectID": "index.html#本資料のねらい",
    "href": "index.html#本資料のねらい",
    "title": "POSとマーケティングデータ分析",
    "section": "本資料のねらい",
    "text": "本資料のねらい\n立命館大学では、学生が利用できるデータベースとして日経NEEDS 社会科学情報検索システムを契約しており、そこで提供されるデータの1つにPOSデータがあります。 POSデータとは、Point of Sales Dataの略で、販売時点のデータのことを指します。 この本では、約40万件のレシートデータを利用して、自社と競合他社の製品の分析を行っています。 POSデータを用いることで、小売店における商品の売れ行きや、顧客の購買行動を分析することを通じて、Rでのデータ操作や分析手法を学ぶことができます。",
    "crumbs": [
      "POSデータで学ぶはじめてのマーケティングデータ分析"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html",
    "href": "POS_Marketing_07.html",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "",
    "text": "7.1 店頭カバー率\n週次集計POSデータを使って、他の店で売れている商品を見つけ出す。\nパッケージとデータを準備する。\n第6回ファイルで使うデータはchp7.xlsxです。 まずパッケージを読み込みます。\npacman::p_load(tidyverse, readxl, arules, ggthemes, knitr, kableExtra, gt, gtExtras, patchwork)\n次にここで用いるchp6.xlsxのシート名を確認します。\nreadxl::excel_sheets(\"data/chp7.xlsx\")\n\n [1] \"2023年11月期データ\" \"図7-1-図7-5\"        \"図7-7\"             \n [4] \"図7-11-図7-15\"      \"図7-18-図7-20\"      \"図7-22-図7-25\"     \n [7] \"図7-27\"             \"図7-28\"             \"表7-2\"             \n[10] \"図7-29\"             \"図7-30\"             \"表7-3\"             \n[13] \"図7-31\"             \"表7-4\"              \"図7-32\"            \n[16] \"表7-5\"              \"表7-6\"              \"図7-33\"            \n[19] \"図7-35\"\nたくさんシートがあるMS Excelファイルですが、1番目の「2023年11月期データ」を読み込みます。\ndf &lt;- readxl::read_excel(\"data/chp7.xlsx\", sheet = 1)\nhead(df)\n\n\n\n\n\n\n\n\n\n\n\n\n\n店舗\n店舗面積\n商圏人口\n最寄り駅からの距離\n駐車場台数\n競合店舗数\n月間売上高\n\n\n\nA001\n1500\n207.6\n100\n27\n12\n130069\n\n\nA002\n1010\n210.8\n590\n20\n3\n72981\n\n\nA003\n1260\n174.5\n180\n57\n19\n84050\n\n\nA004\n1180\n288.8\n580\n57\n9\n108947\n\n\nA005\n1160\n216.1\n1170\n65\n16\n65733\n\n\nA006\n1290\n251.0\n570\n43\n2\n114216\nこのデータフレームには、\nという7つの変数が含まれています。\n最寄り駅からの距離と月間売上高の散布図を描いてみます。 グラフの設定をmystyleとしてlistにまとめておきます。\nmystyle &lt;- list(\n  theme_bw(base_family = \"HiraKakuPro-W3\"),\n  scale_fill_tableau(name = \"Tableau 20\")\n)\ndf |&gt;\n  ggplot() + aes(x = 最寄り駅からの距離, y = 月間売上高) +\n  geom_point() +\n  labs(title = \"図7-1 最寄り駅からの距離と月間売上高の散布図\") + mystyle\nいろんな変数の組み合わせの散布図を描いてみます。\ng1 &lt;- df |&gt;\n  ggplot() + aes(x = 店舗面積, y = 月間売上高) +\n  geom_point() +\n  labs(title = \"図7-2 店舗面積と月間売上高\") + mystyle\ng2 &lt;- df |&gt;\n  ggplot() + aes(x = 商圏人口, y = 月間売上高) +\n  geom_point() +\n  labs(title = \"図7-3 商圏人口と月間売上高\") + mystyle\ng3 &lt;- df |&gt;\n  ggplot() + aes(x = 駐車場台数, y = 月間売上高) +\n  geom_point() +\n  labs(title = \"図7-4 駐車場台数と月間売上高\") + mystyle\ng4 &lt;- df |&gt;\n  ggplot() + aes(x = 競合店舗数, y = 月間売上高) +\n  geom_point() +\n  labs(title = \"図7-5 競合店舗数と月間売上高\") + mystyle\n(g1 + g2) / (g3 + g4)\n店舗面積、商圏人口、駐車場台数、競合店舗数と月間売上高の相関係数を計算してみます。\npacman::p_load(corrplot)\npar(family= \"HiraKakuProN-W3\")\ndf |&gt;\n  select(店舗面積, 商圏人口, 最寄り駅からの距離, 駐車場台数, 競合店舗数, 月間売上高) |&gt;\n  cor() |&gt;\n  corrplot(method = \"number\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#店頭カバー率",
    "href": "POS_Marketing_07.html#店頭カバー率",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "",
    "text": "店舗 : 文字列\n店舗面積 : 数値\n商圏人口 : 数値\n最寄り駅からの距離 : 数値\n駐車場台数 : 数値\n競合店舗数 : 数値\n月間売上高 : 数値\n\n\n\n\nそれぞれの詳細はテキストp.215を参照してください。",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_07.html#回帰分析",
    "href": "POS_Marketing_07.html#回帰分析",
    "title": "\n7  第7回 回帰分析で新店舗の売上予測\n",
    "section": "\n7.2 回帰分析",
    "text": "7.2 回帰分析\nテキストでは独立変数が1つの単回帰を繰り返していますが、通常は複数の独立変数を組み込んだ重回帰モデルを構築します。\n\n\\begin{aligned}\n\\text{月間売上高}_i & = \\beta_0 + \\beta_1  店舗面積_i + \\beta_2 商圏人口_i + \\\\\n                   & + \\beta_3 最寄り駅からの距離_i + \\beta_4 駐車場台数_i + \\\\\n                   & + \\beta_5 競合店舗数_i + \\varepsilon_i\n\\end{aligned}\n\nこのモデルをRで推定します。\n\nOLS &lt;- lm(月間売上高 ~ 店舗面積 + 商圏人口 + 最寄り駅からの距離 + 駐車場台数 + 競合店舗数, data = df)\nsummary(OLS)\n\n\nCall:\nlm(formula = 月間売上高 ~ 店舗面積 + 商圏人口 + \n    最寄り駅からの距離 + 駐車場台数 + 競合店舗数, \n    data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22884.9  -8871.7    594.1   9150.0  24149.5 \n\nCoefficients:\n                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)        70086.274   9100.157   7.702 1.15e-11 ***\n店舗面積               4.403      4.763   0.924    0.358    \n商圏人口             199.768     24.087   8.294 6.36e-13 ***\n最寄り駅からの距離   -47.798      3.691 -12.951  &lt; 2e-16 ***\n駐車場台数             9.441     54.552   0.173    0.863    \n競合店舗数          -159.811    195.141  -0.819    0.415    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 11470 on 97 degrees of freedom\nMultiple R-squared:  0.7144,    Adjusted R-squared:  0.6997 \nF-statistic: 48.53 on 5 and 97 DF,  p-value: &lt; 2.2e-16\n\n\nデータを標準化してから回帰分析を行うと、各変数の係数が標準偏差単位で解釈できるので、変数間の比較がしやすくなります。 変数を標準化するとどうなるのか確認してみましょう。\n月刊売上高の分布を確認します。\n\nhist(df$月間売上高, main = \"月間売上高の分布\", xlab = \"月間売上高\")\n\n\n\n\n\n\n\n正規化を行うと、平均が0、標準偏差が1になります。\n\nhist(scale(df$月間売上高), main = \"月間売上高の標準化\", xlab = \"月間売上高\")\n\n\n\n\n\n\n\n先ほどの回帰分析の結果と変数を標準化した結果を比較してみます。\n\n\n標準化は，変数の平均を0，標準偏差を1にする変換で，観測値から平均を引いて標準偏差で割ることで行います。 Rではscale()関数を使って標準化を行います。\n\ndf_std &lt;- df |&gt;\n  select(店舗面積, 商圏人口, 最寄り駅からの距離, 駐車場台数, 競合店舗数, 月間売上高) |&gt;\n  scale() |&gt; # 標準化\n  as.data.frame() # データフレームに変換\nresult_std &lt;- lm(月間売上高 ~ 店舗面積 + 商圏人口 + 最寄り駅からの距離 + 駐車場台数 + 競合店舗数, data = df_std)\nresults &lt;- list(\"OLS\" = OLS, \"標準化\" = result_std)\nmodelsummary::msummary(results,\n                       stars = TRUE,\n                       gof_omit = \"RMSE|AIC|BIC|Log.Lik\",\n                       digits = 3)\n\n \n\n  \n    \n\ntinytable_f1xrixww9yvu7me0h1d2\n\n\n      \n\n \n                OLS\n                標準化\n              \n+ p \n\n\n(Intercept)       \n                  70086.274***\n                  0.000    \n                \n\n                  \n                  (9100.157)  \n                  (0.054)  \n                \n\n店舗面積          \n                  4.403       \n                  0.052    \n                \n\n                  \n                  (4.763)     \n                  (0.056)  \n                \n\n商圏人口          \n                  199.768***  \n                  0.465*** \n                \n\n                  \n                  (24.087)    \n                  (0.056)  \n                \n\n最寄り駅からの距離\n                  -47.798***  \n                  -0.715***\n                \n\n                  \n                  (3.691)     \n                  (0.055)  \n                \n\n駐車場台数        \n                  9.441       \n                  0.010    \n                \n\n                  \n                  (54.552)    \n                  (0.056)  \n                \n\n競合店舗数        \n                  -159.811    \n                  -0.045   \n                \n\n                  \n                  (195.141)   \n                  (0.055)  \n                \n\nNum.Obs.          \n                  103         \n                  103      \n                \n\nR2                \n                  0.714       \n                  0.714    \n                \n\nR2 Adj.           \n                  0.700       \n                  0.700    \n                \n\nF                 \n                  48.527      \n                  48.527",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>第7回 回帰分析で新店舗の売上予測</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html",
    "href": "POS_Marketing_01.html",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "",
    "text": "1.1 はじめに\n第1回の内容は，POSデータを集約して，売上金額や売上個数の合計を計算し，販売状況の特徴を把握しやすい図や表を作成することです。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#この章で使うファイルとパッケージ",
    "href": "POS_Marketing_01.html#この章で使うファイルとパッケージ",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.2 この章で使うファイルとパッケージ",
    "text": "1.2 この章で使うファイルとパッケージ\nここで用いるファイルは，MS Excelのファイルです。 MS Excelで作成されたフィアルは拡張子に.xlsxがついています。\n\n\n拡張子(extension)は，ファイル名の最後についている.xlsxや.csvなどの文字列のことで，ファイルの種類を示しています。Windowsではデフォルトで拡張子が表示されない設定になっているかもしれないので，必ず拡張子を表示させる設定にしておいてください。.exeファイルを知らずに実行すると，ウイルスに感染する可能性があるので，拡張子を表示させることはセキュリティ上も重要です。\n\nchp1.xlsx\n\nRの機能を拡張するために，ここでは以下のパッケージを用います。\n\n\ntidyverse : データの読み込み，加工，可視化に使うパッケージ\n\nreadxl : Excelファイルを読み込むためのパッケージ\n\n通常，Rではinstall.packages()関数を使ってパッケージをインストールし，library()で読み出しますが，ここではpacmanパッケージを使って一括でインストール・読み込みを行います。\npacmanパッケージを使うために，以下のコードを実行してください。\n\ninstall.packages(\"tinytex\")\ninstall.packages(\"pacman\") # 最初の1回だけ実行\n\npacmanパッケージには便利な関数がいろいろありますが，ここではp_load()関数を使って複数のパッケージを一括で読み込みます。まだインストールされていないパッケージがあれば，自動でインストールされます。 便利なパッケージをいろいろ読み込んでおきましょう。\n\npacman::p_load(tidyverse, readxl, ggthemes, gt, gtExtras)\n\n\n\nggtheme : グラフのテーマを変更するためのパッケージ\n\ngt : 表を作成するためのパッケージ\n\ngtExtras : gtパッケージの拡張機能を提供するパッケージ\n\n\n\npacman::p_load()のように，「パッケージ名::関数名」という書き方で，パッケージ名を指定して関数を使うと，p_load()関数がpacmanパッケージの関数であることが分かりやすいので，似たような名前の関数があるときは，パッケージ名をつけて使うといいでしょう。 たとえば，dplyr::select()関数やreadxl::read_excel()関数です。\nこの章で使うファイルは作業ディレクトリのdataフォルダにいれておきましょう。 Rは作業ディレクトリとなっているフォルダを軸にしてファイルを読み込むため，ファイルの場所に注意してください。 ここでは作業ディレクトリの中にdataフォルダを作り，そこにchp1.xlsxを保存してあるので，data/chp1.xlsxと指定することでファイルにアクセスしています。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#rの準備",
    "href": "POS_Marketing_01.html#rの準備",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.3 Rの準備",
    "text": "1.3 Rの準備\n\nRをインストールしておきましょう。\nRStudioかVS Codeをインストールしておきましょう。\nRのパッケージtidyverseをインストールしておきましょう。\n作業ディレクトリを設定しておきましょう。\n\nこれらの内容が分からない場合は，R入門の資料や本を参照してください。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#データの読み込み",
    "href": "POS_Marketing_01.html#データの読み込み",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.4 データの読み込み",
    "text": "1.4 データの読み込み\nまずはreadxlパッケージを使ってデータchp1.xlsxを読み込んでみましょう。 このExcelファイルのシートの一覧を表示してみます。\n\nreadxl::excel_sheets(\"data/chp1.xlsx\")\n\n[1] \"いつものPOSデータ\"     \"ピボットテーブル\"      \"表1-2・図1-19\"        \n[4] \"表1-4・図1-28・図1-29\" \"表1-5・図1-32\"         \"表1-6\"                \n[7] \"図1-38\"               \n\n\nexcel_sheets()関数はデフォルトで1番目のシートを読み込みます。 「いつものPOSデータ」を読み込みたいので，特に指定せずにread_excel()関数を使って読み込みます。\n\ndf &lt;- readxl::read_excel(\"data/chp1.xlsx\")\nhead(df) # 戦闘6行を表示\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n日付\n曜日\n時間\n性別\n年代\nメーカー\n商品名\n単価\n個数\n金額\n\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合A\nおいしい緑茶\n160\n2\n320\n\n\nR000001\n2023-01-02\n月\n10\n女性\n30代\n競合B\n静岡の緑茶\n170\n2\n340\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合A\nおいしい濃茶\n160\n2\n320\n\n\nR000002\n2023-01-02\n月\n10\n男性\n60歳以上\n競合B\n静岡の緑茶\n170\n4\n680\n\n\nR000003\n2023-01-02\n月\n10\n男性\n50代\n競合C\nほうじ茶\n140\n1\n140\n\n\nR000004\n2023-01-02\n月\n10\n女性\n50代\n競合D\nウーロン茶\n140\n3\n420\n\n\n\n\n\n\nどんな変数があるのか確認するにはnames()関数を使います。\n\nnames(df)\n\n [1] \"レシート番号\" \"日付\"         \"曜日\"         \"時間\"         \"性別\"        \n [6] \"年代\"         \"メーカー\"     \"商品名\"       \"単価\"         \"個数\"        \n[11] \"金額\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#データの属性を確認する",
    "href": "POS_Marketing_01.html#データの属性を確認する",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.5 データの属性を確認する。",
    "text": "1.5 データの属性を確認する。\nデータの属性や型を確認するにはstr()関数を使います。\n\nstr(df)\n\ntibble [374,090 × 11] (S3: tbl_df/tbl/data.frame)\n $ レシート番号: chr [1:374090] \"R000001\" \"R000001\" \"R000002\" \"R000002\" ...\n $ 日付        : POSIXct[1:374090], format: \"2023-01-02\" \"2023-01-02\" ...\n $ 曜日        : chr [1:374090] \"月\" \"月\" \"月\" \"月\" ...\n $ 時間        : num [1:374090] 10 10 10 10 10 10 10 10 10 10 ...\n $ 性別        : chr [1:374090] \"女性\" \"女性\" \"男性\" \"男性\" ...\n $ 年代        : chr [1:374090] \"30代\" \"30代\" \"60歳以上\" \"60歳以上\" ...\n $ メーカー    : chr [1:374090] \"競合A\" \"競合B\" \"競合A\" \"競合B\" ...\n $ 商品名      : chr [1:374090] \"おいしい緑茶\" \"静岡の緑茶\" \"おいしい濃茶\" \"静岡の緑茶\" ...\n $ 単価        : num [1:374090] 160 170 160 170 140 140 160 150 150 160 ...\n $ 個数        : num [1:374090] 2 2 2 4 1 3 1 2 3 4 ...\n $ 金額        : num [1:374090] 320 340 320 680 140 420 160 300 450 640 ...\n\n\ndplyr::glimpse()関数を使うと，データの概要をより見やすく表示できます。\n\ndplyr::glimpse(df)\n\nRows: 374,090\nColumns: 11\n$ レシート番号 &lt;chr&gt; \"R000001\", \"R000001\", \"R000002\", \"R000002\", \"R000003\", \"R…\n$ 日付         &lt;dttm&gt; 2023-01-02, 2023-01-02, 2023-01-02, 2023-01-02, 2023-01-…\n$ 曜日         &lt;chr&gt; \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月\", \"月…\n$ 時間         &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1…\n$ 性別         &lt;chr&gt; \"女性\", \"女性\", \"男性\", \"男性\", \"男性\", \"女性\", \"女性\", \"…\n$ 年代         &lt;chr&gt; \"30代\", \"30代\", \"60歳以上\", \"60歳以上\", \"50代\", \"50代\", \"…\n$ メーカー     &lt;chr&gt; \"競合A\", \"競合B\", \"競合A\", \"競合B\", \"競合C\", \"競合D\", \"競…\n$ 商品名       &lt;chr&gt; \"おいしい緑茶\", \"静岡の緑茶\", \"おいしい濃茶\", \"静岡の緑茶…\n$ 単価         &lt;dbl&gt; 160, 170, 160, 170, 140, 140, 160, 150, 150, 160, 160, 17…\n$ 個数         &lt;dbl&gt; 2, 2, 2, 4, 1, 3, 1, 2, 3, 4, 1, 2, 2, 1, 1, 2, 1, 2, 3, …\n$ 金額         &lt;dbl&gt; 320, 340, 320, 680, 140, 420, 160, 300, 450, 640, 160, 34…\n\n\nこの表の上部をみると、このデータには変数が11個，観測値が374090個あることが分かります。 また，変数名の横に&lt;chr&gt;や&lt;dbl&gt;といった文字が表示されていますが，これは変数の型を示しています。 &lt;chr&gt;は文字列型，&lt;dbl&gt;は数値型，&lt;dttm&gt;は日付型を示しています。\n\n\n文字型，数値型，日付型以外にも，\n\n\n&lt;fct&gt;: 因子型\n\n&lt;int&gt;: 整数型\n\n&lt;lgl&gt;: 論理型\n\nなどがあります。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#データの概要を確認する",
    "href": "POS_Marketing_01.html#データの概要を確認する",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.6 データの概要を確認する",
    "text": "1.6 データの概要を確認する\nデータの属性を確認するために，summary()関数を使ってみましょう。 基本関数summary()は，データの記述統計量などを返してくれる関数です。\n\nsummary(df)\n\n レシート番号            日付                            曜日          \n Length:374090      Min.   :2023-01-02 00:00:00.00   Length:374090     \n Class :character   1st Qu.:2023-05-09 00:00:00.00   Class :character  \n Mode  :character   Median :2023-07-28 00:00:00.00   Mode  :character  \n                    Mean   :2023-07-16 10:09:45.75                     \n                    3rd Qu.:2023-09-23 00:00:00.00                     \n                    Max.   :2023-12-31 00:00:00.00                     \n      時間           性別               年代             メーカー        \n Min.   :10.00   Length:374090      Length:374090      Length:374090     \n 1st Qu.:13.00   Class :character   Class :character   Class :character  \n Median :16.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :15.57                                                           \n 3rd Qu.:18.00                                                           \n Max.   :21.00                                                           \n    商品名               単価            個数             金額       \n Length:374090      Min.   :140.0   Min.   : 1.000   Min.   : 140.0  \n Class :character   1st Qu.:150.0   1st Qu.: 1.000   1st Qu.: 160.0  \n Mode  :character   Median :160.0   Median : 2.000   Median : 280.0  \n                    Mean   :154.5   Mean   : 1.783   Mean   : 275.7  \n                    3rd Qu.:160.0   3rd Qu.: 2.000   3rd Qu.: 320.0  \n                    Max.   :170.0   Max.   :14.000   Max.   :2100.0  \n\n\nこの表より，\n\n日付は2023年1月2日から2023年12月31日まで\n時間は10:00から21:00まで\n単価は数値で，140〜170\n個数は数値で，1〜14\n金額は数値で，140〜2100\n\nとなっていることがわかります。 また文字型となっている曜日，性別，年代，メーカー，商品名はデータの個数としてLength:が出力されていることがわかります。 文字列のsummary()を出力しても意味がないので，文字型の変数を除外して，数値型の変数だけを表示するには，select()関数とwhere()関数を使い， is.double関数を使って数値型の変数だけを選択します。\n\ndf |&gt;\n  select(where(is.double)) |&gt;\n  summary()\n\n      日付                             時間            単価      \n Min.   :2023-01-02 00:00:00.00   Min.   :10.00   Min.   :140.0  \n 1st Qu.:2023-05-09 00:00:00.00   1st Qu.:13.00   1st Qu.:150.0  \n Median :2023-07-28 00:00:00.00   Median :16.00   Median :160.0  \n Mean   :2023-07-16 10:09:45.75   Mean   :15.57   Mean   :154.5  \n 3rd Qu.:2023-09-23 00:00:00.00   3rd Qu.:18.00   3rd Qu.:160.0  \n Max.   :2023-12-31 00:00:00.00   Max.   :21.00   Max.   :170.0  \n      個数             金額       \n Min.   : 1.000   Min.   : 140.0  \n 1st Qu.: 1.000   1st Qu.: 160.0  \n Median : 2.000   Median : 280.0  \n Mean   : 1.783   Mean   : 275.7  \n 3rd Qu.: 2.000   3rd Qu.: 320.0  \n Max.   :14.000   Max.   :2100.0  \n\n\n\n\nis.double()関数は，引数の型が数値型かどうかを判定する関数で，数値型の場合はTRUEを返し，そうでない場合はFALSEを返します。このように，is.型名()関数は，型を判定する関数として使われます。 条件を満たす変数だけを選択するdplyr::select()関数と，dplyr::where()関数を使うことで変数の型を指定して変数を抽出できます。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#因子型",
    "href": "POS_Marketing_01.html#因子型",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.7 因子型",
    "text": "1.7 因子型\nこれらの文字型変数曜日，性別，年代，メーカー，商品名は，どのカテゴリーに属しているかを表しているカテゴリカルデータであるため， 文字型から因子型(factor)に変換しておきましょう。 変数を因子型に変更するには，facor()関数やas.factor()関数を使います。 ここでは，曜日に順番があるため，levelsオプションとorderedオプションで曜日の種類と順番を指定しています。\n\ndf &lt;- df %&gt;%\n  mutate(曜日 = factor(曜日, levels = c(\"月\", \"火\", \"水\", \"木\", \"金\", \"土\", \"日\"), ordered = TRUE),\n         性別 = as.factor(性別),\n         年代 = as.factor(年代),\n         メーカー = as.factor(メーカー),\n         商品名 = as.factor(商品名))\n\n変数の型を変更したので，もう一度，summary()関数を使ってデータを確認してみましょう。\n\nsummary(df)\n\n レシート番号            日付                        曜日            時間      \n Length:374090      Min.   :2023-01-02 00:00:00.00   月:36468   Min.   :10.00  \n Class :character   1st Qu.:2023-05-09 00:00:00.00   火:44573   1st Qu.:13.00  \n Mode  :character   Median :2023-07-28 00:00:00.00   水:52418   Median :16.00  \n                    Mean   :2023-07-16 10:09:45.75   木:37703   Mean   :15.57  \n                    3rd Qu.:2023-09-23 00:00:00.00   金:66894   3rd Qu.:18.00  \n                    Max.   :2023-12-31 00:00:00.00   土:74754   Max.   :21.00  \n                                                     日:61280                  \n   性別              年代        メーカー               商品名     \n 女性:274659   20歳未満:19102   競合A:144742   ウーロン茶  :31905  \n 男性: 99431   20代    :49716   競合B: 46516   おいしい濃茶:59910  \n               30代    :81065   競合C: 39190   おいしい緑茶:84832  \n               40代    :74773   競合D: 31905   ほうじ茶    :39190  \n               50代    :93194   自社 :111737   静岡の緑茶  :46516  \n               60歳以上:56240                  濃い茶      :45982  \n                                               緑茶        :65755  \n      単価            個数             金額       \n Min.   :140.0   Min.   : 1.000   Min.   : 140.0  \n 1st Qu.:150.0   1st Qu.: 1.000   1st Qu.: 160.0  \n Median :160.0   Median : 2.000   Median : 280.0  \n Mean   :154.5   Mean   : 1.783   Mean   : 275.7  \n 3rd Qu.:160.0   3rd Qu.: 2.000   3rd Qu.: 320.0  \n Max.   :170.0   Max.   :14.000   Max.   :2100.0  \n                                                  \n\n\nすると，曜日，性別，年代，メーカー，商品名がカテゴリー変数として認識され，カテゴリーごとの個数が表示されています。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#条件によるデータの抽出",
    "href": "POS_Marketing_01.html#条件によるデータの抽出",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.8 条件によるデータの抽出",
    "text": "1.8 条件によるデータの抽出\nメーカー変数が自社の場合だけを抽出するには，dplyr::filter()関数を使います。 filter()関数は，引数にメーカー == \"自社という条件を指定することで，条件に合致するデータだけを抽出します。\n\ndf |&gt;\n  dplyr::filter(メーカー == \"自社\") |&gt;\n  head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nレシート番号\n日付\n曜日\n時間\n性別\n年代\nメーカー\n商品名\n単価\n個数\n金額\n\n\n\nR000005\n2023-01-02\n月\n10\n女性\n50代\n自社\n濃い茶\n150\n2\n300\n\n\nR000005\n2023-01-02\n月\n10\n女性\n50代\n自社\n緑茶\n150\n3\n450\n\n\nR000010\n2023-01-02\n月\n10\n女性\n50代\n自社\n濃い茶\n150\n2\n300\n\n\nR000010\n2023-01-02\n月\n10\n女性\n50代\n自社\n緑茶\n150\n1\n150\n\n\nR000011\n2023-01-02\n月\n10\n男性\n20代\n自社\n緑茶\n150\n1\n150\n\n\nR000012\n2023-01-02\n月\n10\n女性\n20代\n自社\n緑茶\n150\n1\n150",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#基礎集計でデータの傾向をチェック",
    "href": "POS_Marketing_01.html#基礎集計でデータの傾向をチェック",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.9 基礎集計でデータの傾向をチェック",
    "text": "1.9 基礎集計でデータの傾向をチェック\nメーカーごとの売上金額合計を示す表を作成してみましょう。 Excelでピボットテーブルを使う手続が教科書で解説されていますが，Rだとdplyrパッケージを使って簡単にできます。\n\ndf_maker_sales &lt;- df |&gt;\n  dplyr::group_by(メーカー) |&gt;\n  dplyr::summarise(売上金額合計 = sum(金額))\ndf_maker_sales\n\n\n\n\nメーカー\n売上金額合計\n\n\n\n競合A\n42695520\n\n\n競合B\n13537440\n\n\n競合C\n9289700\n\n\n競合D\n7486080\n\n\n自社\n30126150\n\n\n\n\n\n\nこれだけです。 キレイな表にするなら，gt()関数とgtExtraパッケージを使うといいでしょう。\n\ndf_maker_sales |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:2, decimals = 0) |&gt;\n  tab_header(title = \"表1-2 メーカーごとの売上金額\") |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  as_raw_html()\n\n\n  \n  \n\n\n\n表1-2 メーカーごとの売上金額\n\n\nメーカー\n売上金額合計\n\n\n\n\n競合A\n42,695,520\n\n\n競合B\n13,537,440\n\n\n競合C\n9,289,700\n\n\n競合D\n7,486,080\n\n\n自社\n30,126,150\n\n\n\n\n\n\n次に，各メーカーのどの商品が，平均何円で売られているのか，を調べてみましょう。 group_by()関数の引数に，メーカーと商品名を指定して，summarise()関数でグループごとの平均単価を計算し， arrange()関数でメーカーと平均単価でソートします。desc()関数は降順にソートするための関数です。\n\ndf_maker_item &lt;- df |&gt;\n  group_by(メーカー, 商品名) |&gt; # メーカーと商品名でグループ化\n  summarise(平均単価 = mean(単価)) |&gt; # 平均単価を計算\n  arrange(メーカー, desc(平均単価)) |&gt;# メーカーと平均単価でソート\n  ungroup()\n\n`summarise()` has grouped output by 'メーカー'. You can override using the\n`.groups` argument.\n\ndf_maker_item |&gt;\n  gt() |&gt;\n  fmt_number(columns = 3:3, decimals = 0) |&gt;\n  tab_header(title = \"表1−3 商品ごとの単価\") |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  as_raw_html()\n\n\n  \n  \n\n\n\n表1−3 商品ごとの単価\n\n\nメーカー\n商品名\n平均単価\n\n\n\n\n競合A\nおいしい濃茶\n160\n\n\n競合A\nおいしい緑茶\n160\n\n\n競合B\n静岡の緑茶\n170\n\n\n競合C\nほうじ茶\n140\n\n\n競合D\nウーロン茶\n140\n\n\n自社\n濃い茶\n150\n\n\n自社\n緑茶\n150",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#資料作成に必要なデータを取り出す",
    "href": "POS_Marketing_01.html#資料作成に必要なデータを取り出す",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.10 資料作成に必要なデータを取り出す",
    "text": "1.10 資料作成に必要なデータを取り出す\nデータ全体における売上金額と売上個数を計算して，各月と各時間帯にの売上金額を計算してみる。\n\n# 全体の売上金額と売上個数\ndf |&gt;\n  summarise(\n    売上金額合計 = sum(金額),\n    売上個数合計 = sum(個数)\n    )\n\n\n\n\n売上金額合計\n売上個数合計\n\n\n103134890\n667147\n\n\n\n\n\n自社製品ごとの個数と金額を計算してみましょう。\n\ndf_jisha_total &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt; # 自社製品だけを抽出\n  group_by(商品名) |&gt;\n  summarise(\n    売上金額合計 = sum(金額),\n    売上個数合計 = sum(個数)\n    ) |&gt;\n  arrange(desc(売上金額合計))\ndf_jisha_total\n\n\n\n\n商品名\n売上金額合計\n売上個数合計\n\n\n\n緑茶\n18057150\n120381\n\n\n濃い茶\n12069000\n80460\n\n\n\n\n\n\nこれで自社の製品ごとの売上金額と売上個数の合計が計算されました。 ここで注意しないといけないことは，group_by()関数とsummarise()関数を使った場合，グループごとに1つの統計量を返すため，上のコードだと， 自社の2商品ごとの売上金額と売上個数の合計が出力され，2行2列のデータフレームが返されていることが分かります。\n次に，各月ごとの売上金額を計算してみましょう。 日付変数の型を確認します。\n\nclass(df$日付)\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nPOSIXct POSIXt という日付型のデータです。 この変数日付から月を取り出すには，lubridateパッケージを使います。 日付データは2023-05-14 UTCといった形式で格納されているため，lubridate::month()関数を使って月を取り出します。\n\ndf_month_sales &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  mutate(月 = lubridate::month(日付, label = TRUE)) |&gt;\n  group_by(月) |&gt; # 月ごとにグループ化\n  summarise(売上金額合計 = sum(金額)) |&gt;\n  arrange(月) |&gt;\n  ungroup()\n\ndf_month_sales |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:2, decimals = 0) |&gt;\n  tab_header(title = \"表1−5 自社商品の月ごとの売上金額\") |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  tab_options(\n    heading.title.font.size = \"small\",\n    table.font.size = \"large\",\n    table.width = pct(60)\n    )\n\n\n\n\n\n\n表1−5 自社商品の月ごとの売上金額\n\n\n月\n売上金額合計\n\n\n\n\n1\n1,577,250\n\n\n2\n1,317,900\n\n\n3\n1,809,300\n\n\n4\n2,238,750\n\n\n5\n2,506,050\n\n\n6\n2,288,550\n\n\n7\n3,844,350\n\n\n8\n4,231,950\n\n\n9\n3,599,550\n\n\n10\n2,888,250\n\n\n11\n2,140,800\n\n\n12\n1,683,450\n\n\n\n\n\n\n同じように各時間帯ごとの売上金額を計算してみましょう。\n\ndf_time_sales &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  group_by(時間) |&gt;\n  summarise(売上金額合計 = sum(金額)) |&gt;\n  arrange(時間) |&gt;\n  ungroup()\n\ndf_time_sales |&gt;\n  gt() |&gt;\n  fmt_number(columns = 2:2, decimals = 0) |&gt;\n  gt_theme_pff() |&gt; # テーマを適用\n  tab_header(title = \"表1−6 自社商品の時間帯別売上高\") |&gt;\n  tab_options(\n        heading.title.font.size = \"small\",\n        table.font.size = \"large\",\n        table.width = pct(60)\n        )\n\n\n\n\n\n\n表1−6 自社商品の時間帯別売上高\n\n\n時間\n売上金額合計\n\n\n\n\n10\n1,506,600\n\n\n11\n2,070,750\n\n\n12\n2,942,400\n\n\n13\n2,729,550\n\n\n14\n2,108,700\n\n\n15\n2,740,050\n\n\n16\n3,033,150\n\n\n17\n3,617,700\n\n\n18\n3,038,550\n\n\n19\n2,710,950\n\n\n20\n2,124,900\n\n\n21\n1,502,850",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#集計結果をグラフで可視化",
    "href": "POS_Marketing_01.html#集計結果をグラフで可視化",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.11 集計結果をグラフで可視化",
    "text": "1.11 集計結果をグラフで可視化\n可視化はRの得意分野です。 ggplot2パッケージを使って，いろんなグラフで表示してみましょう。\n\n\nggplot2パッケージで日本語を表示させるためには，一手間必要になります。 しかもMacOSとWindowsでやり方が異なるので，注意してください。 松浦の環境はMacOSであるため，ヒラギノフォントを指定してます。 ついでに，カラーパレットもユニバーサルデザインに配慮したscale_fill_tableau(name = \"Tableau 20\")を指定してます。\nメーカー別の売上合計金額を棒グラフにします。\n\ndf_maker_sales |&gt;\n  ggplot() + aes(x = メーカー, y = 売上金額合計, fill = メーカー) +\n  geom_col() + theme_bw(base_family = \"Noto San JP\") +\n  scale_fill_tableau(name = \"Tableau 20\") # Tableau 20 パレットを適用\n\n\n\n\n\n\n\n月別売上高を折れ線グラフにします。\n\ndf_month_sales |&gt;\n  ggplot() + aes(x = 月, y = 売上金額合計, group = 1) +\n  geom_line() + geom_point() +\n  theme_bw(base_family = \"HiraKakuPro-W3\")\n\n\n\n\n\n\n\n夏に売上高がピークを迎えていることが分かります。\n時間帯別売上高を棒グラフにします。\n\ndf_time_sales |&gt;\n  ggplot() +\n  aes(x = 時間, y = 売上金額合計, fill = factor(時間, levels = rev(unique(時間)))) + # 時間の順序を逆にする\n  geom_col() + theme_bw(base_family = \"HiraKakuPro-W3\") + # テーマとフォント\n  guides(fill = guide_legend(title = \"時間帯\")) +\n  scale_fill_viridis_d(direction = 1) # Viridis パレットを逆順に適用\n\n\n\n\n\n\n\n12時ころと17時ころに売上高が大きくなっているので，昼食・夕食の時間帯に売上が伸びていることが分かります。\nさらに，月ごと，時間ごとの棒グラフを重ねて表示してみましょう。\n\ndf_month_time_sales &lt;- df |&gt;\n  filter(メーカー == \"自社\") |&gt;\n  mutate(月 = lubridate::month(日付, label = TRUE),\n         時間 = as.factor(時間)) |&gt;\n  group_by(月, 時間) |&gt;\n  summarise(売上金額合計 = sum(金額)) |&gt;\n  arrange(月, 時間)\n\n`summarise()` has grouped output by '月'. You can override using the `.groups`\nargument.\n\ndf_month_time_sales |&gt;\n  ggplot() + aes(x = 月, y = 売上金額合計, fill = 時間) +\n  geom_col(position = \"dodge\") + theme_bw(base_family = \"HiraKakuPro-W3\") +\n  guides(fill = guide_legend(title = \"時間帯\")) +\n  scale_fill_viridis_d(direction = -1)\n\n\n\n\n\n\n\n昼食時と夕食前に売上が伸びる傾向は1月から12月まで観察されていますが，その差は夏が非常に多く，冬には昼食時と夕食前とそれ以外の売上の差が小さくなっていることが分かります。\nこれをアニメーションにしてみましょう。 Rにはggplot2パッケージで作ったグラフをアニメーションにするgganimateパッケージがあります。 ここでは，transition_states()関数とenter_fade()関数，exit_fade()関数を使って，時間帯ごとの売上高をアニメーションで表示してみます。\n\n\ntransition_states(): アニメーションの状態を指定します。\n\nenter_fade(): アニメーションの開始時のエフェクトを指定します。\n\nexit_fade(): アニメーションの終了時のエフェクトを指定します。\n\n\npacman::p_load(gganimate)\n\n\ndf_month_time_sales |&gt;\n  ggplot() +\n  aes(x = 月, y = 売上金額合計, fill = 時間) +\n  geom_col(position = \"dodge\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  guides(fill = guide_legend(title = \"時間帯\")) +\n  scale_fill_viridis_d(direction = -1) +\n  transition_states(時間, transition_length = 2, state_length = 1) +\n  labs(\n    title = \"月ごとの時間帯別売上高: 時間帯 {closest_state} 時\",\n    x = \"月\",\n    y = \"売上金額合計\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\n\n\n\n\n\n\n同じように，月と時間を入れ替えてみましょう。\n\ndf_month_time_sales |&gt;\n  ggplot() +\n  aes(x = 時間, y = 売上金額合計, fill = 月) +\n  geom_col(position = \"dodge\") +\n  theme_bw(base_family = \"HiraKakuPro-W3\") +\n  guides(fill = guide_legend(title = \"月\")) +\n  scale_fill_viridis_d(direction = -1) +\n  transition_states(月, transition_length = 2, state_length = 1) +\n  labs(\n    title = \"時間ごとの月別売上高:  {closest_state} 月\",\n    x = \"時間\",\n    y = \"売上金額合計\"\n  ) +\n  enter_fade() +\n  exit_fade()\n\n\n\n\n\n\n\nテキストの気温と販売個数の散布図は，気温データがないため作れません。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  },
  {
    "objectID": "POS_Marketing_01.html#提出用の資料を作成する",
    "href": "POS_Marketing_01.html#提出用の資料を作成する",
    "title": "\n1  第1回 売上をまとめた表をつくる\n",
    "section": "\n1.12 提出用の資料を作成する。",
    "text": "1.12 提出用の資料を作成する。\nテキストではMS Excelで作成した表を、MS Powerpointに貼り付けてスライド資料を作成するようになっていますが、 RとQuartoを使えば、データ分析と資料作成を同じ場所で行うことができます。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>第1回 売上をまとめた表をつくる</span>"
    ]
  }
]