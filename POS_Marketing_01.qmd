# 第1回 売上をまとめた表をつくる

## この章で使うファイルとパッケージ

ファイル

- `chp1.xlsx`

パッケージ

- `tidyverse` : データの読み込み，加工，可視化に使うパッケージ
- `readxl` : Excelファイルを読み込むためのパッケージ

```{r}
pacman::p_load(tidyverse, readxl, tidyplots, ggthemes, kableExtra)
```

:::{.aside}
`pacman`パッケージは，複数のパッケージを一括で読み込むためのパッケージです。
インストールされていないパッケージを指定したときは，自動でインストールされる便利なパッケージです。
:::

この章で使うファイルは作業ディレクトリの`data`フォルダにいれておきましょう。

:::{.aside}
Rは作業ディレクトリとなっているフォルダを軸にしてファイルを読み込むため，ファイルの場所に注意してください。
作業ディレクトリの中に`data`フォルダを作り，そこに`chp1.xlsx`を保存してあるとき，`data/chp1.xlsx`と指定することでファイルにアクセスできます。
:::


## Rの準備

- Rをインストールしておきましょう。
- RStudioかVS Codeをインストールしておきましょう。
- Rのパッケージ`tidyverse`をインストールしておきましょう。
- 作業ディレクトリを設定しておきましょう。

これらの内容が分からない場合は，R入門の資料や本を参照してください。

## データの読み込み

まずは`readxl`パッケージを使ってデータ`chp1.xlsx`を読み込んでみましょう。
このExcelファイルのシートの一覧を表示してみます。

```{r}
readxl::excel_sheets("data/chp1.xlsx")
```

`excel_sheets()`関数はデフォルトで1番目のシートを読み込みます。
「いつものPOSデータ」を読み込みたいので，特に指定せずに`read_excel()`関数を使って読み込みます。

```{r}
#| cache=TRUE
df <- readxl::read_excel("data/chp1.xlsx")
head(df) # 戦闘6行を表示
```

どんな変数があるのか確認するには`names()`関数を使います。

```{r}
names(df)
```

## データの属性を確認する。

データの属性や型を確認するには`str()`関数を使います。

```{r}
str(df)
```

`dplyr::glimpse()`関数を使うと，データの概要をより見やすく表示できます。

```{r}
dplyr::glimpse(df)
```

この表の上部をみると、このデータには変数が11個，観測値が374090個あることが分かります。
また，変数名の横に`<chr>`や`<dbl>`といった文字が表示されていますが，これは変数の型を示しています。
`<chr>`は文字列型，`<dbl>`は数値型，`<dttm>`は日付型を示しています。

:::{.aside}
文字型，数値型，日付型以外にも，

- `<fct>`: 因子型
- `<int>`: 整数型
- `<lgl>`: 論理型

などがあります。
:::

## データの概要を確認する

データの属性を確認するために，`summary()`関数を使ってみましょう。
基本関数`summary()`は，データの記述統計量などを返してくれる関数です。

```{r}
summary(df)
```

この表より，

- 日付は2023年1月2日から2023年12月31日まで
- 時間は10:00から21:00まで
- 単価は数値で，140〜170
- 個数は数値で，1〜14
- 金額は数値で，140〜2100

となっていることがわかります。
また文字型となっている`曜日`，`性別`，`年代`，`メーカー`，`商品名`はデータの個数として`Length:`が出力されていることがわかります。
文字列の`summary()`を出力しても意味がないので，文字型の変数を除外して，数値型の変数だけを表示するには，`select()`関数と`where()`関数を使い，
`is.double`関数を使って数値型の変数だけを選択します。

```{r}
df |>
  select(where(is.double)) |>
  summary()
```

## 因子型

これらの文字型変数`曜日`，`性別`，`年代`，`メーカー`，`商品名`は，どのカテゴリーに属しているかを表している**カテゴリカルデータ**であるため，
文字型から**因子型**(factor)に変換しておきましょう。
変数を因子型に変更するには，`facor()`関数や`as.factor()`関数を使います。
ここでは，曜日に順番があるため，`levels`オプションと`ordered`オプションで曜日の種類と順番を指定しています。

```{r}
df <- df %>%
  mutate(曜日 = factor(曜日, levels = c("月", "火", "水", "木", "金", "土", "日"), ordered = TRUE),
         性別 = as.factor(性別),
         年代 = as.factor(年代),
         メーカー = as.factor(メーカー),
         商品名 = as.factor(商品名))
```

変数の型を変更したので，もう一度，`summary()`関数を使ってデータを確認してみましょう。

```{r}
summary(df)
```

すると，`曜日`，`性別`，`年代`，`メーカー`，`商品名`がカテゴリー変数として認識され，カテゴリーごとの個数が表示されています。

## 条件によるデータの抽出

`メーカー`変数が`自社`の場合だけを抽出するには，`dplyr::filter()`関数を使います。
`filter()`関数は，引数に`メーカー == "自社`という条件を指定することで，条件に合致するデータだけを抽出します。


```{r}
df |>
  dplyr::filter(メーカー == "自社") |>
  head()
```

## 基礎集計でデータの傾向をチェック

メーカーごとの売上金額合計を示す表を作成してみましょう。
Excelでピボットテーブルを使う手続が教科書で解説されていますが，Rだと`dplyr`パッケージを使って簡単にできます。

```{r}
#| class-output: code-output
df_maker_sales <- df |>
  dplyr::group_by(メーカー) |>
  dplyr::summarise(売上金額合計 = sum(金額))
df_maker_sales
```

これだけです。
キレイな表にするなら，`knitr::kable()`関数と`kableExtra`パッケージを使うといいでしょう。

```{r}
df_maker_sales |>
  knitr::kable(
    format = "html",
    caption = "表1-2 メーカーごとの売上金額"
  ) |>
  kableExtra::kable_styling(
    bootstrap_options = c("striped")
  )
```

次に，各メーカーのどの商品が，平均何円で売られているのか，を調べてみましょう。
`group_by()`関数の引数に，`メーカー`と`商品名`を指定して，`summarise()`関数でグループごとの平均単価を計算し，
`arrange()`関数でメーカーと平均単価でソートします。`desc()`関数は降順にソートするための関数です。
```{r}
df_maker_item <- df |>
  group_by(メーカー, 商品名) |> # メーカーと商品名でグループ化
  summarise(平均単価 = mean(単価)) |> # 平均単価を計算
  arrange(メーカー, desc(平均単価))# メーカーと平均単価でソート
df_maker_item |>
  knitr::kable(
    format = "html",
    caption = "表1−3 商品ごとの単価"
  ) |>
  kableExtra::kable_styling(
    bootstrap_options = c("striped")
  )
```

## 資料作成に必要なデータを取り出す

データ全体における売上金額と売上個数を計算して，各月と各時間帯にの売上金額を計算してみる。


```{r}
#| class-output: code-output
# 全体の売上金額と売上個数
df |>
  summarise(
    売上金額合計 = sum(金額),
    売上個数合計 = sum(個数)
    )
```

自社製品ごとの個数と金額を計算してみましょう。

```{r}
#| class-output: code-output
df_jisha_total <- df |>
  filter(メーカー == "自社") |> # 自社製品だけを抽出
  group_by(商品名) |>
  summarise(
    売上金額合計 = sum(金額),
    売上個数合計 = sum(個数)
    ) |>
  arrange(desc(売上金額合計))
df_jisha_total
```

これで自社の売上金額と売上個数の合計が計算されました。
ここで注意しないといけないことは，`group_by()`関数と`summarise()`関数を使った場合，グループごとに1つの統計量を返すため，上のコードだと，
自社の2商品ごとの売上金額と売上個数の合計が出力され，2行2列のデータフレームが返されていることが分かります。



次に，各月ごとの売上金額を計算してみましょう。
`日付`変数の型を確認します。

```{r}
#| class-output: code-output
class(df$日付)
```

`POSIXct` `POSIXt` という日付型のデータです。
この変数`日付`から月を取り出すには，`lubridate`パッケージを使います。
日付データは`2023-05-14 UTC`といった形式で格納されているため，`lubridate::month()`関数を使って月を取り出します。



```{r}
df_month_sales <- df |>
  filter(メーカー == "自社") |>
  mutate(月 = lubridate::month(日付, label = TRUE)) |>
  group_by(月) |> # 月ごとにグループ化
  summarise(売上金額合計 = sum(金額)) |>
  arrange(月)

df_month_sales |>
  knitr::kable(
    format = "html",
    caption = "表1−5 自社商品の月ごとの売上金額"
  ) |>
    kableExtra::kable_styling(
    bootstrap_options = c("striped")
  )
```

同じように各時間帯ごとの売上金額を計算してみましょう。

```{r}
df_time_sales <- df |>
  filter(メーカー == "自社") |>
  group_by(時間) |>
  summarise(売上金額合計 = sum(金額)) |>
  arrange(時間)

df_time_sales |>
  knitr::kable(
    format = "html",
    caption = "表1−6 自社商品の時間帯ごとの売上金額"
  ) |>
    kableExtra::kable_styling(
    bootstrap_options = c("striped")
  )
```

## 集計結果をグラフで可視化

可視化はRの得意分野です。
`ggplot2`パッケージを使って，いろんなグラフで表示してみましょう。


メーカー別売上金額を棒グラフにします。

```{r}
df_maker_sales |>
  ggplot() + aes(x = メーカー, y = 売上金額合計, fill = メーカー) +
  geom_col() + theme_bw(base_family = "HiraKakuPro-W3")

```

月別売上高を折れ線グラフにします。

```{r}
df_month_sales |>
  ggplot() + aes(x = 月, y = 売上金額合計, group = 1) +
  geom_line() + geom_point() +
  theme_bw(base_family = "HiraKakuPro-W3")
```

夏に売上高がピークを迎えていることが分かります。

時間帯別売上高を棒グラフにします。

```{r}
#| class-output: code-output
df_time_sales |>
  ggplot() +
  aes(x = 時間, y = 売上金額合計, fill = factor(時間, levels = rev(unique(時間)))) + # 時間の順序を逆にする
  geom_col() + theme_bw(base_family = "HiraKakuPro-W3") + # テーマとフォント
  guides(fill = guide_legend(title = "時間帯")) +
  scale_fill_viridis_d(direction = 1) # Viridis パレットを逆順に適用
```

12時ころと17時ころに売上高が大きくなっているので，昼食・夕食の時間帯に売上が伸びていることが分かります。

さらに，月ごと，時間ごとの棒グラフを重ねて表示してみましょう。

```{r}
df_month_time_sales <- df |>
  filter(メーカー == "自社") |>
  mutate(月 = lubridate::month(日付, label = TRUE),
         時間 = as.factor(時間)) |>
  group_by(月, 時間) |>
  summarise(売上金額合計 = sum(金額)) |>
  arrange(月, 時間)

df_month_time_sales |>
  ggplot() + aes(x = 月, y = 売上金額合計, fill = 時間) +
  geom_col(position = "dodge") + theme_bw(base_family = "HiraKakuPro-W3") +
  guides(fill = guide_legend(title = "時間帯")) +
  scale_fill_viridis_d(direction = -1)
```

昼食時と夕食前に売上が伸びる傾向は1月から12月まで観察されていますが，その差は夏が非常に多く，冬には昼食時と夕食前とそれ以外の売上の差が小さくなっていることが分かります。

これをアニメーションにしてみましょう。
Rには`ggplot2`パッケージで作ったグラフをアニメーションにする`gganimate`パッケージがあります。
ここでは，`transition_states()`関数と`enter_fade()`関数，`exit_fade()`関数を使って，時間帯ごとの売上高をアニメーションで表示してみます。

- `transition_states()`: アニメーションの状態を指定します。
- `enter_fade()`: アニメーションの開始時のエフェクトを指定します。
- `exit_fade()`: アニメーションの終了時のエフェクトを指定します。

```{r}
pacman::p_load(gganimate)
```

```{r}
#| cache: true
df_month_time_sales |>
  ggplot() +
  aes(x = 月, y = 売上金額合計, fill = 時間) +
  geom_col(position = "dodge") +
  theme_bw(base_family = "HiraKakuPro-W3") +
  guides(fill = guide_legend(title = "時間帯")) +
  scale_fill_viridis_d(direction = -1) +
  transition_states(時間, transition_length = 2, state_length = 1) +
  labs(
    title = "月ごとの時間帯別売上高: 時間帯 {closest_state} 時",
    x = "月",
    y = "売上金額合計"
  ) +
  enter_fade() +
  exit_fade()
```

同じように，月と時間を入れ替えてみましょう。

```{r}
df_month_time_sales |>
  ggplot() +
  aes(x = 時間, y = 売上金額合計, fill = 月) +
  geom_col(position = "dodge") +
  theme_bw(base_family = "HiraKakuPro-W3") +
  guides(fill = guide_legend(title = "月")) +
  scale_fill_viridis_d(direction = -1) +
  transition_states(月, transition_length = 2, state_length = 1) +
  labs(
    title = "時間ごとの月別売上高:  {closest_state} 月",
    x = "時間",
    y = "売上金額合計"
  ) +
  enter_fade() +
  exit_fade()
```


テキストの気温と販売個数の散布図は，気温データがないため作れません。

## 提出用の資料を作成する。

テキストではMS Excelで作成した表を、MS Powerpointに貼り付けてスライド資料を作成するようになっていますが、
RとQuartoを使えば、データ分析と資料作成を同じ場所で行うことができます。

